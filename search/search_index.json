{"config":{"lang":["en","zh"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>\u300e May I enjoy my life and practice my art, respected by all men and in all times \u300f</p>"},{"location":"Blogs/","title":"Blog Notes","text":"<p>some daily blogs.</p>"},{"location":"Blogs/Basics/","title":"Back To Basics","text":"<p>As it mean.</p>"},{"location":"Blogs/Basics/How%20c%2B%2B%20Resolves%20a%20Funciton%20Call/","title":"How C++ Resolves A Function Call","text":"<p>Ref: How C++ Resolves A Function Call</p> <p>\u8fd9\u662f\u7f16\u8bd1\u5668\u5982\u4f55\u4e3a\u4e00\u4e2a\u7ed9\u5b9a\u51fd\u6570\u8c03\u7528\u8868\u8fbe\u5f0f\u5339\u914d\u6b63\u786e\u7684\u51fd\u6570\u7684\u8fc7\u7a0b\uff1a</p> <p></p> <p>\u8fd9\u4e9b\u6b65\u9aa4\u5305\u542b\u5728C++\u6807\u51c6\u4e2d\uff0c\u6bcf\u4e00\u5bb6\u7684C++\u7f16\u8bd1\u5668\u90fd\u5fc5\u987b\u5f97\u9075\u5b88\u8fd9\u4e9b\u6807\u51c6\u3002\u5e76\u4e14\uff0c\u5bf9\u4e8e\u51fd\u6570\u8c03\u7528\u8868\u8fbe\u5f0f\u7684\u8bc4\u4f30\u7684\u6574\u4e2a\u8fc7\u7a0b\u90fd\u5728\u7f16\u8bd1\u671f\u3002</p> <p>\u5176\u4e2d\u7684\u4e00\u4e9b\u4e1c\u897f\u90fd\u53ef\u80fd\u7b26\u5408\u6211\u4eec\u7684\u76f4\u89c9\uff0c\u4f46\u662f\u67d0\u4e00\u4e9b\u5728\u7b2c\u4e00\u773c\u770b\u5230\u8fd8\u662f\u6bd4\u8f83\u8ba9\u4eba\u96be\u4ee5\u7406\u89e3\u3002\u8fd9\u5176\u4e2d\u6d89\u53ca\u5230\u4e86\u51e0\u4e2aC++\u5e38\u8c08\u7684\u4e1c\u897f\uff0c\u6bd4\u5982ADL(Argument-dependent lookup)\u548cSFINAE\u5565\u7684\u3002</p>"},{"location":"Blogs/Basics/How%20c%2B%2B%20Resolves%20a%20Funciton%20Call/#name-lookup","title":"Name Lookup","text":"<p>\u4ece\u540d\u79f0\u67e5\u627e\u9636\u6bb5\u5f00\u59cb\uff0c\u4e3e\u4e2a\u4f8b\u5b50\u3002\u5982\u4e0b\u4e00\u6bb5\u4ee3\u7801\uff0c\u8868\u8fbe\u5f0f<code>blast(ast, 100)</code>\u51fd\u6570\u8c03\u7528\u6700\u7ec8\u4f1a\u8c03\u7528\u54ea\u4e00\u4e2a\u51fd\u6570\uff1f</p> <pre><code>namespace galaxy {\n    struct Asteroid {\n        float radius = 12;\n    };\n    // candidates 1\n    void blast(Asteroid* ast, float force);\n}\n\nstruct Target {\n    galaxy::Asteroid* ast;\n    Target(galaxy::Asteroid* ast) : ast{ast} {}\n    operator galaxy::Asteroid*() const { return ast; }\n};\n\n// candidates 2\nbool blast(Target target);\ntemplate &lt;typename T&gt; void blast(T* obj, float force);\n\nvoid play(galaxy::Asteroid* ast) {\n    blast(ast, 100);\n}\n</code></pre> <p>\u7b2c\u4e00\u4e2a\u8fc7\u7a0b\u662fname lookup. \u5728\u8fd9\u4e00\u6b65\uff0c\u7f16\u8bd1\u5668\u4f1a\u5411\u4e0a\u67e5\u627e\u6240\u6709\u5177\u6709\u76f8\u540c\u6807\u8bc6(identity)\u7684\u51fd\u6570\u548c\u51fd\u6570\u6a21\u7248.</p> <p></p> <p>\u5982\u6d41\u7a0b\u56fe\u6240\u793a\uff0c\u4e3b\u8981\u6709\u4e09\u79cd\u540d\u79f0\u67e5\u627e\uff0c\u6bcf\u4e00\u79cd\u90fd\u6709\u5bf9\u5e94\u7684\u89c4\u5219\u3002</p> <ul> <li>Member name lookup \u53d1\u751f\u5728<code>.</code>\u6216\u8005<code>-&gt;</code>\u6807\u8bc6\u4e4b\u540e\uff0c\u6bd4\u5982\u5728<code>foo-&gt;bar</code>\u3002\u8fd9\u79cdlookup\u901a\u5e38\u7528\u4e8e\u5b9a\u4f4d\u7c7b\u7684\u6210\u5458\u3002</li> <li>Qualified name lookup \u53d1\u751f\u5728\u5f53\u540d\u79f0\u4e2d\u643a\u5e26\u4e86\u57df\u6807\u8bc6\u7b26<code>::</code>\uff0c\u6bd4\u5982<code>std::sort</code>\u3002\u8fd9\u79cd\u540d\u79f0\u67e5\u627e\u662f\u663e\u793a\u7684\u3002\u53ea\u4f1a\u5728<code>::</code>\u5de6\u8fb9\u90e8\u5206\u6240\u6807\u8bc6\u7684\u8303\u56f4\u5185\u67e5\u627e\u53f3\u8fb9\u7684\u90e8\u5206\u3002</li> <li>Unqualified name lookup \u4e0d\u5c5e\u4e8e\u4e0a\u9762\u8303\u56f4\u3002\u5f53\u7f16\u8bd1\u5668\u770b\u5230\u4e00\u4e2a\u672a\u9650\u5b9a\u7684\u540d\u79f0\uff0c\u6bd4\u5982<code>blast</code>\u3002\u4f1a\u6839\u636e\u4e0a\u4e0b\u6587\u5728\u4e0d\u540c\u7684\u8303\u56f4\u91cc\u67e5\u627e\u540d\u79f0\u3002\u8be6\u7ec6\u7684\u89c4\u5219\u5728\u8fd9\u3002</li> </ul> <p>\u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\u7684\u662f\u4e00\u4e2a\u672a\u9650\u5b9a\u540d\u79f0\u67e5\u627e\u3002 \u7f16\u8bd1\u5668\u4f1a\u627e\u5230\u5f88\u591a\u7b26\u5408\u6761\u4ef6\u7684\u58f0\u660e\uff0c\u6211\u4eec\u79f0\u4e3acandidates\u3002\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\u6211\u4eec\u6709\u4e09\u4e2a\u5019\u9009: </p> <p>\u4e0a\u9762\u5708\u51fa\u7684\u7b2c\u4e00\u4e2a\u5019\u9009\u4ee3\u7801\u503c\u5f97\u683c\u5916\u5173\u6ce8\uff0c\u56e0\u4e3a\u5b83\u5c55\u793a\u4e86 C++ \u7684\u4e00\u4e2a\u5bb9\u6613\u88ab\u5ffd\u89c6\u7684\u7279\u6027\uff1a\u53c2\u6570\u4f9d\u8d56\u67e5\u627e(argument-dependent lookup)\uff0c\u7b80\u79f0\u4e3a ADL\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u5feb\u901f\u603b\u7ed3\uff0c\u4ee5\u9632\u4f60\u4e5f\u9047\u5230\u540c\u6837\u7684\u95ee\u9898\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u4f60\u4e0d\u4f1a\u60f3\u5230\u8fd9\u4e2a\u51fd\u6570\u4f1a\u88ab\u8c03\u7528\uff0c\u56e0\u4e3a\u5b83\u662f\u5728 galaxy \u547d\u540d\u7a7a\u95f4\u5185\u58f0\u660e\u7684\uff0c\u800c\u8c03\u7528\u6765\u81ea galaxy \u547d\u540d\u7a7a\u95f4\u4e4b\u5916\u3002\u4ee3\u7801\u4e2d\u4e5f\u6ca1\u6709 <code>using namespace galaxy</code> \u6307\u4ee4\u8ba9\u8fd9\u4e2a\u51fd\u6570\u53ef\u89c1\u3002\u90a3\u4e48\uff0c\u4e3a\u4ec0\u4e48\u8fd9\u4e2a\u51fd\u6570\u662f\u5019\u9009\u51fd\u6570\u5462\uff1f</p> <p>\u5176\u539f\u56e0\u662f\uff0c\u5f53\u5728\u51fd\u6570\u8c03\u7528\u4e2d\u4f7f\u7528\u672a\u9650\u5b9a\u7684\u540d\u79f0\u65f6\uff08\u8be5\u540d\u79f0\u4e0d\u6307\u5411\u7c7b\u6210\u5458\uff09\uff0cADL \u5c31\u4f1a\u542f\u52a8\uff0c\u5e76\u4e14\u540d\u79f0\u67e5\u627e\u4f1a\u53d8\u5f97\u66f4\u52a0\u8d2a\u5a6a\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u9664\u4e86\u5e38\u89c4\u7684\u67e5\u627e\u65b9\u5f0f\u5916\uff0c\u7f16\u8bd1\u5668\u8fd8\u4f1a\u5728\u53c2\u6570\u7c7b\u578b\u7684\u540d\u79f0\u7a7a\u95f4\u4e2d\u67e5\u627e\u5019\u9009\u51fd\u6570\uff0c\u8fd9\u5c31\u662f \"\u4f9d\u8d56\u53c2\u6570\u67e5\u627e \"\u7684\u7531\u6765\u3002 </p> <p>\u5177\u4f53\u7684 ADL\u89c4\u5219 \u6bd4\u6211\u5728\u8fd9\u91cc\u63cf\u8ff0\u7684\u8981\u7ec6\u81f4\u5f97\u591a\uff0c\u4f46\u5173\u952e\u662f ADL \u53ea\u9002\u7528\u4e8e\u975e\u9650\u5b9a\u540d\u79f0\u3002\u5bf9\u4e8e\u5728\u5355\u4e2a\u4f5c\u7528\u57df\u4e2d\u67e5\u627e\u7684\u9650\u5b9a\u540d\u79f0\uff0cADL \u6ca1\u6709\u4f5c\u7528\u3002ADL \u5728\u91cd\u8f7d <code>+</code> \u548c <code>==</code> \u7b49\u5185\u7f6e\u8fd0\u7b97\u7b26\u65f6\u4e5f\u8d77\u4f5c\u7528\uff0c\u8fd9\u8ba9\u4f60\u5728\u7f16\u5199\u6570\u5b66\u5e93\u65f6\u53ef\u4ee5\u5229\u7528\u5b83\u3002</p> <p>\u6709\u8da3\u7684\u662f\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6210\u5458\u540d\u79f0\u67e5\u627e\u53ef\u4ee5\u627e\u5230\u672a\u9650\u5b9a\u540d\u79f0\u67e5\u627e\u627e\u4e0d\u5230\u7684\u5019\u9009\u8005\u3002\u6709\u5173\u8be6\u60c5\uff0c\u8bf7\u53c2\u9605 Eli Bendersky \u53d1\u8868\u7684\u8fd9\u7bc7\u6587\u7ae0\u3002</p>"},{"location":"Blogs/Basics/How%20c%2B%2B%20Resolves%20a%20Funciton%20Call/#special-handling-of-function-templates","title":"Special Handling of Function Templates","text":"<p>\u901a\u8fc7\u540d\u79f0\u67e5\u627e\u627e\u5230\u7684\u5019\u9009\u51fd\u6570\u4e2d\uff0c\u6709\u4e9b\u662f\u51fd\u6570\uff0c\u6709\u4e9b\u662f\u51fd\u6570\u6a21\u677f\u3002\u51fd\u6570\u6a21\u677f\u53ea\u6709\u4e00\u4e2a\u95ee\u9898\uff1a\u6211\u4eec\u65e0\u6cd5\u8c03\u7528\u51fd\u6570\u6a21\u7248\u3002\u53ea\u80fd\u591f\u8c03\u7528\u51fd\u6570\u3002\u56e0\u6b64\uff0c\u5728\u540d\u79f0\u67e5\u627e\u4e4b\u540e\uff0c\u7f16\u8bd1\u5668\u4f1a\u6d4f\u89c8\u5019\u9009\u5217\u8868\uff0c\u5e76\u5c1d\u8bd5\u5c06\u6bcf\u4e2a\u51fd\u6570\u6a21\u677f\u8f6c\u5316\u4e3a\u5408\u9002\u7684\u51fd\u6570\u3002 </p> <p>\u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u7b2c\u4e09\u4e2a\u5019\u9009\u6a21\u677f\u5b9e\u9645\u4e0a\u5c31\u662f\u51fd\u6570\u6a21\u677f\uff1a</p> <p></p> <p>\u8fd9\u4e2a\u51fd\u6570\u6a21\u677f\u53ea\u6709\u4e00\u4e2a\u6a21\u677f\u53c2\u6570 <code>T</code>\uff0c\u56e0\u6b64\u5b83\u9700\u8981\u4e00\u4e2a\u6a21\u677f\u53c2\u6570\u3002\u8c03\u7528\u8005 <code>blast(ast, 100)</code> \u6ca1\u6709\u6307\u5b9a\u4efb\u4f55\u6a21\u677f\u53c2\u6570\uff0c\u56e0\u6b64\u4e3a\u4e86\u5c06\u6b64\u51fd\u6570\u6a21\u677f\u8f6c\u5316\u4e3a\u51fd\u6570\uff0c\u7f16\u8bd1\u5668\u5fc5\u987b\u63a8\u5bfc\u51fa <code>T</code> \u7684\u7c7b\u578b\u3002\u5728\u8fd9\u4e00\u6b65\u4e2d\uff0c\u7f16\u8bd1\u5668\u4f1a\u5c06\u8c03\u7528\u8005\u4f20\u9012\u7684\u51fd\u6570\u53c2\u6570\u7c7b\u578b\uff08\u5982\u4e0b\u56fe\u5de6\u4fa7\uff09\u4e0e\u51fd\u6570\u6a21\u677f\u671f\u671b\u7684\u51fd\u6570\u53c2\u6570\u7c7b\u578b\uff08\u5982\u4e0b\u56fe\u53f3\u4fa7\uff09\u8fdb\u884c\u6bd4\u8f83\u3002\u5982\u679c\u53f3\u4fa7\u5f15\u7528\u4e86\u4efb\u4f55\u672a\u6307\u5b9a\u7684\u6a21\u677f\u53c2\u6570\uff08\u5982 T\uff09\uff0c\u7f16\u8bd1\u5668\u4f1a\u5c1d\u8bd5\u4f7f\u7528\u5de6\u4fa7\u7684\u4fe1\u606f\u5bf9\u5176\u8fdb\u884c\u63a8\u5bfc\u3002</p> <p></p> <p>\u5728\u672c\u4f8b\u4e2d\uff0c\u7f16\u8bd1\u5668\u5c06 <code>T</code> \u6f14\u7ece\u4e3a <code>galaxy::Asteroid</code>\uff0c\u56e0\u4e3a\u8fd9\u6837\u505a\u53ef\u4ee5\u4f7f\u7b2c\u4e00\u4e2a\u51fd\u6570\u53c2\u6570 <code>T*</code> \u4e0e\u53c2\u6570 <code>ast</code> \u517c\u5bb9\u3002\u5173\u4e8e\u6a21\u677f\u53c2\u6570\u63a8\u5bfc\u7684\u89c4\u5219\u662f\u4e00\u4e2a\u5f88\u5927\u7684\u8bdd\u9898\uff0c\u4f46\u5728\u50cf\u672c\u4f8b\u8fd9\u6837\u7684\u7b80\u5355\u4f8b\u5b50\u4e2d\uff0c\u5b83\u4eec\u901a\u5e38\u4f1a\u8fbe\u5230\u4f60\u6240\u671f\u671b\u7684\u6548\u679c\u3002\u5982\u679c\u6a21\u677f\u53c2\u6570\u63a8\u5bfc\u4e0d\u8d77\u4f5c\u7528\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c\u5982\u679c\u7f16\u8bd1\u5668\u65e0\u6cd5\u4ee5\u4e00\u79cd\u4f7f\u51fd\u6570\u53c2\u6570\u4e0e\u8c03\u7528\u8005\u53c2\u6570\u517c\u5bb9\u7684\u65b9\u5f0f\u63a8\u5bfc\u51fa\u6a21\u677f\u53c2\u6570\uff0c\u90a3\u4e48\u51fd\u6570\u6a21\u677f\u5c31\u4f1a\u4ece\u5019\u9009\u5217\u8868\u4e2d\u5220\u9664\u3002</p> <p>\u5019\u9009\u5217\u8868\u4e2d\u7684\u4efb\u4f55\u51fd\u6570\u6a21\u677f\uff0c\u53ea\u8981\u80fd\u5b58\u6d3b\u5230\u8fd9\u4e00\u6b65\uff0c\u90fd\u5c06\u8fdb\u5165\u4e0b\u4e00\u6b65\uff1a\u6a21\u677f\u53c2\u6570\u66ff\u6362\u3002\u5728\u8fd9\u4e00\u6b65\u4e2d\uff0c\u7f16\u8bd1\u5668\u4f1a\u4f7f\u7528\u51fd\u6570\u6a21\u677f\u58f0\u660e\uff0c\u5e76\u7528\u76f8\u5e94\u7684\u6a21\u677f\u53c2\u6570\u66ff\u6362\u6bcf\u4e2a\u6a21\u677f\u53c2\u6570\u7684\u6bcf\u4e00\u6b21\u51fa\u73b0\u3002\u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff0c\u6a21\u677f\u53c2\u6570 <code>T</code> \u88ab\u66ff\u6362\u4e3a\u63a8\u5bfc\u51fa\u7684\u6a21\u677f\u53c2\u6570 <code>galaxy::Asteroid</code>\u3002\u8fd9\u4e00\u6b65\u6210\u529f\u540e\uff0c\u6211\u4eec\u7ec8\u4e8e\u5f97\u5230\u4e86\u4e00\u4e2a\u53ef\u4ee5\u8c03\u7528\u7684\u771f\u6b63\u51fd\u6570\u7684\u7b7e\u540d\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u4e00\u4e2a\u51fd\u6570\u6a21\u677f\uff01</p> <p></p> <p>\u5f53\u7136\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u6a21\u677f\u53c2\u6570\u66ff\u6362\u53ef\u80fd\u4f1a\u5931\u8d25\u3002\u5047\u8bbe\u540c\u4e00\u4e2a\u51fd\u6570\u6a21\u677f\u63a5\u53d7\u7b2c\u4e09\u4e2a\u53c2\u6570\uff0c\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>template &lt;typename T&gt; void blast(T* obj, float force, typename T::Units mass = 5000);\n</code></pre> <p>\u5982\u679c\u662f\u8fd9\u79cd\u60c5\u51b5\uff0c\u7f16\u8bd1\u5668\u5c31\u4f1a\u5c1d\u8bd5\u7528 <code>galaxy::Asteroid</code> \u66ff\u6362 <code>T::Units</code> \u4e2d\u7684 <code>T</code>\u3002\u7531\u4e8e <code>galaxy::Asteroid</code> \u5b9e\u9645\u4e0a\u5e76\u6ca1\u6709\u540d\u4e3a <code>Units</code> \u7684\u6210\u5458\uff0c\u56e0\u6b64\u4ea7\u751f\u7684\u7c7b\u578b\u6807\u8bc6 <code>galaxy::Asteroid::Units</code> \u5c06\u662f\u9519\u8bef\u7684\u3002\u6a21\u677f\u53c2\u6570\u66ff\u6362\u5c06\u5931\u8d25\u3002</p> <p>\u5f53\u6a21\u677f\u53c2\u6570\u66ff\u6362\u5931\u8d25\u65f6\uff0c\u51fd\u6570\u6a21\u677f\u5c31\u4f1a\u4ece\u5019\u9009\u5217\u8868\u4e2d\u5220\u9664--\u5728 C++ \u5386\u53f2\u4e0a\u7684\u67d0\u4e2a\u65f6\u523b\uff0c\u4eba\u4eec\u610f\u8bc6\u5230\u8fd9\u662f\u4e00\u4e2a\u53ef\u4ee5\u5229\u7528\u7684\u7279\u6027\uff01\u8fd9\u4e00\u53d1\u73b0\u50ac\u751f\u4e86\u4e00\u6574\u5957\u5143\u7f16\u7a0b\u6280\u672f\uff0c\u7edf\u79f0\u4e3a SFINAE\uff08\u66ff\u6362\u5931\u8d25\u4e0d\u662f\u9519\u8bef\uff09\u3002SFINAE \u662f\u4e00\u4e2a\u590d\u6742\u96be\u61c2\u7684\u8bdd\u9898\uff0c\u6211\u5728\u8fd9\u91cc\u53ea\u8bf4\u4e24\u70b9\u3002\u9996\u5148\uff0c\u5b83\u672c\u8d28\u4e0a\u662f\u4e00\u79cd\u64cd\u7eb5\u51fd\u6570\u8c03\u7528\u89e3\u6790\u8fc7\u7a0b\u7684\u65b9\u6cd5\uff0c\u4f7f\u5176\u9009\u62e9\u4f60\u60f3\u8981\u7684\u5019\u9009\u7ed3\u679c\u3002\u5176\u6b21\uff0c\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u7a0b\u5e8f\u5458\u8d8a\u6765\u8d8a\u591a\u5730\u4f7f\u7528\u73b0\u4ee3 C++ \u5143\u7f16\u7a0b\u6280\u672f\uff08\u5982\u7ea6\u675f\u548c constexpr if\uff09\u6765\u5b9e\u73b0\u540c\u6837\u7684\u76ee\u7684\uff0cSFINAE \u53ef\u80fd\u4f1a\u9010\u6e10\u5931\u5ba0\u3002</p>"},{"location":"Blogs/Basics/How%20c%2B%2B%20Resolves%20a%20Funciton%20Call/#overload-resolution","title":"Overload Resolution","text":"<p>\u91cd\u8f7d\u51b3\u8bae</p> <p>\u5728\u8fd9\u4e00\u9636\u6bb5\uff0c\u540d\u79f0\u67e5\u627e\u8fc7\u7a0b\u4e2d\u53d1\u73b0\u7684\u6240\u6709\u51fd\u6570\u6a21\u677f\u90fd\u5df2\u6d88\u5931\uff0c\u6211\u4eec\u53ea\u5269\u4e0b\u4e00\u7ec4\u6574\u9f50\u7684\u5019\u9009\u51fd\u6570\u3002\u8fd9\u4e5f\u88ab\u79f0\u4e3a\u91cd\u8f7d\u96c6\u3002\u4e0b\u9762\u662f\u6211\u4eec\u793a\u4f8b\u4e2d\u66f4\u65b0\u540e\u7684\u5019\u9009\u51fd\u6570\u5217\u8868\uff1a</p> <p></p> <p>\u63a5\u4e0b\u6765\u7684\u4e24\u4e2a\u6b65\u9aa4\u901a\u8fc7\u786e\u5b9a\u54ea\u4e9b\u5019\u9009\u51fd\u6570\u662f\u53ef\u884c\u7684\uff08\u6362\u53e5\u8bdd\u8bf4\uff0c\u54ea\u4e9b\u53ef\u4ee5\u5904\u7406\u51fd\u6570\u8c03\u7528\uff09\u6765\u8fdb\u4e00\u6b65\u7f29\u5c0f\u6b64\u5217\u8868\u7684\u8303\u56f4\u3002</p> <p></p> <p>\u4e5f\u8bb8\u6700\u660e\u663e\u7684\u8981\u6c42\u5c31\u662f\u53c2\u6570\u7c7b\u578b\u5fc5\u987b\u517c\u5bb9\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e00\u4e2a\u53ef\u884c\u7684\u51fd\u6570\u5e94\u8be5\u80fd\u591f\u63a5\u53d7\u8c03\u7528\u8005\u7684\u53c2\u6570\u3002\u5982\u679c\u8c03\u7528\u8005\u7684\u53c2\u6570\u7c7b\u578b\u4e0e\u51fd\u6570\u7684\u53c2\u6570\u7c7b\u578b\u4e0d\u5b8c\u5168\u5339\u914d\uff0c\u90a3\u4e48\u81f3\u5c11\u53ef\u4ee5\u5c06\u6bcf\u4e2a\u53c2\u6570\u9690\u5f0f\u5730\u8f6c\u6362\u4e3a\u76f8\u5e94\u7684\u53c2\u6570\u7c7b\u578b\u3002\u8ba9\u6211\u4eec\u770b\u770b\u793a\u4f8b\u4e2d\u7684\u6bcf\u4e2a\u5019\u9009\u51fd\u6570\uff0c\u770b\u770b\u5176\u53c2\u6570\u662f\u5426\u517c\u5bb9\uff1a</p> <p></p> <ul> <li>Candidate1</li> </ul> <p>\u8c03\u7528\u8005\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u7c7b\u578b <code>galaxy::Asteroid*</code> \u5b8c\u5168\u5339\u914d\u3002\u8c03\u7528\u8005\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u7c7b\u578b <code>int</code> \u53ef\u4ee5\u9690\u5f0f\u8f6c\u6362\u4e3a\u7b2c\u4e8c\u4e2a\u51fd\u6570\u53c2\u6570\u7c7b\u578b <code>float</code>\uff0c\u56e0\u4e3a <code>int</code> \u5230 <code>float</code> \u662f\u4e00\u79cd\u6807\u51c6\u8f6c\u6362\u3002\u56e0\u6b64\uff0c\u5019\u90091 \u7684\u53c2\u6570\u662f\u517c\u5bb9\u7684\u3002</p> <ul> <li>Candidate2</li> </ul> <p>\u8c03\u7528\u8005\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u7c7b\u578b <code>galaxy::Asteroid*</code> \u53ef\u4ee5\u9690\u5f0f\u8f6c\u6362\u4e3a\u7b2c\u4e00\u4e2a\u51fd\u6570\u53c2\u6570\u7c7b\u578b <code>Target</code>\uff0c\u56e0\u4e3a <code>Target</code> \u6709\u4e00\u4e2a\u8f6c\u6362\u6784\u9020\u51fd\u6570\uff0c\u53ef\u4ee5\u63a5\u53d7 <code>galaxy::Asteroid*</code> \u7c7b\u578b\u7684\u53c2\u6570\u3002\uff08\u56e0\u4e3a <code>Target</code> \u6709\u4e00\u4e2a\u7528\u6237\u5b9a\u4e49\u7684\u8f6c\u6362\u51fd\u6570\uff0c\u53ef\u4ee5\u9690\u5f0f\u8f6c\u6362\u4e3a <code>galaxy::Asteroid*</code> \u7c7b\u578b\uff09\u3002\u7136\u800c\uff0c\u8c03\u7528\u8005\u4f20\u9012\u4e86\u4e24\u4e2a\u53c2\u6570\uff0c\u800c\u5019\u9009 2 \u53ea\u63a5\u53d7\u4e00\u4e2a\u53c2\u6570\u3002\u56e0\u6b64\uff0c\u5019\u9009 2 \u4e0d\u53ef\u884c\u3002</p> <p></p> <ul> <li>Candidate2</li> </ul> <p>\u5019\u9009 3 \u7684\u53c2\u6570\u7c7b\u578b\u4e0e\u5019\u9009 1 \u76f8\u540c\uff0c\u56e0\u6b64\u4e5f\u662f\u517c\u5bb9\u7684\u3002</p> <p>\u5c31\u50cf\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u7684\u5176\u4ed6\u4e8b\u60c5\u4e00\u6837\uff0c\u63a7\u5236\u9690\u5f0f\u8f6c\u6362\u7684\u89c4\u5219\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u5b8c\u6574\u7684\u4e3b\u9898\u3002\u6700\u503c\u5f97\u6ce8\u610f\u7684\u89c4\u5219\u662f\uff0c\u901a\u8fc7\u5c06\u6784\u9020\u51fd\u6570\u548c\u8f6c\u6362\u64cd\u4f5c\u7b26\u6807\u8bb0\u4e3a\u663e\u5f0f(explicit)\uff0c\u53ef\u4ee5\u907f\u514d\u8ba9\u5b83\u4eec\u53c2\u4e0e\u9690\u5f0f\u8f6c\u6362\u3002</p> <p>\u5728\u4f7f\u7528\u8c03\u7528\u8005\u7684\u53c2\u6570\u8fc7\u6ee4\u6389\u4e0d\u517c\u5bb9\u7684\u5019\u9009\u51fd\u6570\u540e\uff0c\u7f16\u8bd1\u5668\u4f1a\u7ee7\u7eed\u68c0\u67e5\u6bcf\u4e2a\u51fd\u6570\u7684\u7ea6\u675f\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09\u662f\u5426\u6ee1\u8db3\u3002\u7ea6\u675f\u662f C++20 \u7684\u4e00\u9879\u65b0\u529f\u80fd\u3002\u901a\u8fc7\u5b83\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u81ea\u5b9a\u4e49\u903b\u8f91\u6765\u6392\u9664\u5019\u9009\u51fd\u6570\uff08\u6765\u81ea\u7c7b\u6a21\u677f\u6216\u51fd\u6570\u6a21\u677f\uff09\uff0c\u800c\u4e0d\u5fc5\u6c42\u52a9\u4e8e SFINAE\u3002\u5b83\u4eec\u8fd8\u80fd\u63d0\u4f9b\u66f4\u597d\u7684\u9519\u8bef\u4fe1\u606f\u3002\u6211\u4eec\u7684\u793a\u4f8b\u6ca1\u6709\u4f7f\u7528\u7ea6\u675f\uff0c\u56e0\u6b64\u53ef\u4ee5\u8df3\u8fc7\u8fd9\u4e00\u6b65\u3002\uff08\u4ece\u6280\u672f\u4e0a\u8bb2\uff0c\u6807\u51c6\u89c4\u5b9a\u5728\u63a8\u5bfc\u6a21\u677f\u53c2\u6570\u65f6\u4e5f\u8981\u63d0\u524d\u68c0\u67e5\u7ea6\u675f\uff0c\u4f46\u6211\u8df3\u8fc7\u4e86\u8fd9\u4e00\u7ec6\u8282\uff09\u3002\u5728\u8fd9\u4e24\u4e2a\u5730\u65b9\u8fdb\u884c\u68c0\u67e5\u6709\u52a9\u4e8e\u786e\u4fdd\u663e\u793a\u6700\u4f73\u7684\u9519\u8bef\u4fe1\u606f\uff09\u3002</p>"},{"location":"Blogs/Basics/How%20c%2B%2B%20Resolves%20a%20Funciton%20Call/#tiebreakers","title":"TieBreakers","text":"<p>\u91cd\u88c1\u51b3\u8bae\u7684\u6700\u540e\u65f6\u523b</p> <p>\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u53ea\u5269\u4e0b\u4e24\u4e2a\u53ef\u884c\u7684\u51fd\u6570\u3002\u5176\u4e2d\u4efb\u4f55\u4e00\u4e2a\u90fd\u53ef\u4ee5\u5f88\u597d\u5730\u5904\u7406\u539f\u59cb\u51fd\u6570\u8c03\u7528\uff1a</p> <p></p> <p>\u4e8b\u5b9e\u4e0a\uff0c\u5982\u679c\u4e0a\u8ff0\u4efb\u4f55\u4e00\u4e2a\u51fd\u6570\u662f\u552f\u4e00\u53ef\u884c\u7684\u51fd\u6570\uff0c\u90a3\u4e48\u5b83\u5c31\u662f\u5904\u7406\u51fd\u6570\u8c03\u7528\u7684\u51fd\u6570\u3002\u4f46\u7531\u4e8e\u5b58\u5728\u4e24\u4e2a\u51fd\u6570\uff0c\u7f16\u8bd1\u5668\u73b0\u5728\u5fc5\u987b\u505a\u5b83\u5728\u6709\u591a\u4e2a\u53ef\u884c\u51fd\u6570\u65f6\u603b\u662f\u8981\u505a\u7684\u4e8b\u60c5\uff1a\u5b83\u5fc5\u987b\u786e\u5b9a\u54ea\u4e00\u4e2a\u662f\u6700\u4f73\u53ef\u884c\u51fd\u6570\u3002\u8981\u6210\u4e3a\u6700\u4f73\u53ef\u884c\u51fd\u6570\uff0c\u5176\u4e2d\u4e00\u4e2a\u51fd\u6570\u5fc5\u987b \"\u6218\u80dc\"(\u66f4\u52a0\u5339\u914d\u4e8e) \u6240\u6709\u5176\u4ed6\u53ef\u884c\u51fd\u6570\uff0c\u8fd9\u662f\u7531\u4e00\u7cfb\u5217\u89c4\u5219\u51b3\u5b9a\u7684\u3002</p> <p></p> <p>\u8ba9\u6211\u4eec\u6765\u770b\u770b\u524d\u4e09\u6761\u51b3\u80dc\u89c4\u5219:</p> <ol> <li> <p>Better-matching parameters wins</p> <p>C++ \u6700\u91cd\u89c6\u8c03\u7528\u8005\u7684\u53c2\u6570\u7c7b\u578b\u4e0e\u51fd\u6570\u53c2\u6570\u7c7b\u578b\u7684\u5339\u914d\u7a0b\u5ea6\u3002\u7c97\u7565\u5730\u8bf4\uff0cC++ \u66f4\u559c\u6b22\u90a3\u4e9b\u9700\u8981\u5bf9\u7ed9\u5b9a\u53c2\u6570\u8fdb\u884c\u8f83\u5c11\u9690\u5f0f\u8f6c\u6362\u7684\u51fd\u6570\u3002\u5f53\u4e24\u4e2a\u51fd\u6570\u90fd\u9700\u8981\u8f6c\u6362\u65f6\uff0c\u67d0\u4e9b\u8f6c\u6362\u88ab\u8ba4\u4e3a\u6bd4\u5176\u4ed6\u8f6c\u6362 \"\u66f4\u597d\"\u3002\u4f8b\u5982\uff0c<code>std::vector</code> \u7684 <code>operator[]</code> \u5c31\u662f\u6839\u636e\u8fd9\u4e00\u89c4\u5219\u51b3\u5b9a\u8c03\u7528 <code>const</code> \u6216\u975e <code>const</code> \u7248\u672c\u7684\u3002</p> <p>\u5728\u6211\u4eec\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u4e24\u4e2a\u53ef\u884c\u7684\u51fd\u6570\u5177\u6709\u76f8\u540c\u7684\u53c2\u6570\u7c7b\u578b\uff0c\u56e0\u6b64\u6ca1\u6709\u4e00\u4e2a\u6bd4\u53e6\u4e00\u4e2a\u66f4\u597d\u3002\u8fd9\u662f\u4e00\u4e2a\u5e73\u5c40\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u8fdb\u5165\u7b2c\u4e8c\u4e2a\u8d5b\u70b9\u3002</p> </li> <li> <p>Non-template function wins</p> <p>\u5982\u679c\u7b2c\u4e00\u540d\u7684\u80dc\u8d1f\u6ca1\u6709\u5206\u51fa\u80dc\u8d1f\uff0c\u90a3\u4e48 C++ \u4f1a\u4f18\u5148\u8c03\u7528\u975e\u6a21\u677f\u51fd\u6570\uff0c\u800c\u4e0d\u662f\u6a21\u677f\u51fd\u6570\u3002\u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff0c\u8fd9\u5c31\u662f\u51b3\u5b9a\u80dc\u8d1f\u7684\u89c4\u5219\uff1a\u53ef\u884c\u51fd\u6570 1 \u662f\u4e00\u4e2a\u975e\u6a21\u677f\u51fd\u6570\uff0c\u800c\u53ef\u884c\u51fd\u6570 2 \u6765\u81ea\u6a21\u677f\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u7684\u6700\u4f73\u53ef\u884c\u51fd\u6570\u662f\u6765\u81ea\u661f\u7cfb\u547d\u540d\u7a7a\u95f4\u7684\u51fd\u6570\uff1a</p> <p></p> <p>\u503c\u5f97\u91cd\u7533\u7684\u662f\uff0c\u524d\u9762\u4e24\u4e2a\u6761\u4ef6\u662f\u6309\u7167\u6211\u63cf\u8ff0\u7684\u65b9\u5f0f\u6392\u5e8f\u7684\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5982\u679c\u6709\u4e00\u4e2a\u53ef\u884c\u7684\u51fd\u6570\uff0c\u5176\u53c2\u6570\u4e0e\u7ed9\u5b9a\u53c2\u6570\u7684\u5339\u914d\u7a0b\u5ea6\u6bd4\u5176\u4ed6\u6240\u6709\u53ef\u884c\u7684\u51fd\u6570\u90fd\u8981\u597d\uff0c\u90a3\u4e48\u5373\u4f7f\u5b83\u662f\u4e00\u4e2a\u6a21\u677f\u51fd\u6570\uff0c\u4e5f\u4f1a\u4f18\u5148\u9009\u62e9\u3002</p> </li> <li> <p>More specialized template wins</p> <p>\u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u627e\u5230\u4e86\u6700\u4f73\u53ef\u884c\u51fd\u6570\uff0c\u4f46\u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u6211\u4eec\u5c31\u4f1a\u8fdb\u5165\u7b2c\u4e09\u5173\u3002\u5728\u8fd9\u4e00\u51b3\u80dc\u5c40\u4e2d\uff0cC++ \u66f4\u503e\u5411\u4e8e\u8c03\u7528\"\u66f4\u7279\u5316\u7684\"\u7684\u6a21\u677f\u51fd\u6570\u3002\u4f8b\u5982\uff0c\u8bf7\u770b\u4e0b\u9762\u4e24\u4e2a\u51fd\u6570\u6a21\u677f\uff1a</p> <pre><code>template &lt;typename T&gt; void blast(T obj, float force);\ntemplate &lt;typename T&gt; void blast(T* obj, float force);\n</code></pre> <p>\u5bf9\u8fd9\u4e24\u4e2a\u51fd\u6570\u6a21\u677f\u8fdb\u884c\u6a21\u677f\u53c2\u6570\u63a8\u5bfc\u65f6\uff0c\u7b2c\u4e00\u4e2a\u51fd\u6570\u6a21\u677f\u63a5\u53d7\u4efb\u4f55\u7c7b\u578b\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\u4f46\u7b2c\u4e8c\u4e2a\u51fd\u6570\u6a21\u677f\u53ea\u63a5\u53d7\u6307\u9488\u7c7b\u578b\u3002\u56e0\u6b64\uff0c\u53ef\u4ee5\u8bf4\u7b2c\u4e8c\u4e2a\u51fd\u6570\u6a21\u677f\u66f4\u52a0\u4e13\u4e1a\u5316(more specialized)\u3002\u5982\u679c\u8fd9\u4e24\u4e2a\u51fd\u6570\u6a21\u677f\u662f\u6211\u4eec\u8c03\u7528 <code>blast(ast, 100)</code> \u65f6\u8fdb\u884c\u540d\u79f0\u67e5\u627e\u7684\u552f\u4e00\u7ed3\u679c\uff0c\u5e76\u4e14\u8fd9\u4e24\u4e2a\u7ed3\u679c\u90fd\u662f\u53ef\u884c\u7684\u51fd\u6570\uff0c\u90a3\u4e48\u5f53\u524d\u7684\u89c4\u5219\u5c06\u5bfc\u81f4\u7b2c\u4e8c\u4e2a\u51fd\u6570\u6a21\u677f\u88ab\u9009\u4e2d\uff0c\u800c\u4e0d\u662f\u7b2c\u4e00\u4e2a\u3002\u51b3\u5b9a\u54ea\u4e2a\u51fd\u6570\u6a21\u677f\u6bd4\u53e6\u4e00\u4e2a\u51fd\u6570\u6a21\u677f\u66f4\u7279\u5316\u7684\u89c4\u5219\u662f\u53e6\u4e00\u4e2a\u5927\u8bfe\u9898\u3002</p> <p>\u5c3d\u7ba1\u7b2c\u4e8c\u4e2a\u51fd\u6570\u6a21\u677f\u88ab\u8ba4\u4e3a\u66f4\u4e13\u4e1a\u5316\uff0c\u4f46\u91cd\u8981\u7684\u662f\u8981\u660e\u767d\uff0c\u5b83\u5b9e\u9645\u4e0a\u5e76\u4e0d\u662f\u7b2c\u4e00\u4e2a\u51fd\u6570\u6a21\u677f\u7684\u504f\u7279\u5316\u3002\u6070\u6070\u76f8\u53cd\uff0c\u5b83\u4eec\u662f\u4e24\u4e2a\u5b8c\u5168\u72ec\u7acb\u7684\u51fd\u6570\u6a21\u677f\uff0c\u53ea\u662f\u78b0\u5de7\u540c\u540d\u800c\u5df2\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5b83\u4eec\u662f\u91cd\u8f7d\u7684\u3002C++ \u4e0d\u5141\u8bb8\u5bf9\u51fd\u6570\u6a21\u677f\u8fdb\u884c\u90e8\u5206\u7279\u5316\u3002</p> </li> </ol> <p>\u9664\u4e86\u8fd9\u91cc\u5217\u51fa\u7684\u51e0\u79cd\u60c5\u51b5\u5916\uff0c\u8fd8\u6709\u5176\u4ed6\u51e0\u79cd\u6253\u7834\u5e73\u8861\u7684\u60c5\u51b5\u3002\u4f8b\u5982\uff0c\u5982\u679c &lt;=&gt; \u64cd\u4f5c\u7b26 \u548c\u91cd\u8f7d\u6bd4\u8f83\u64cd\u4f5c\u7b26\uff08\u5982 <code>&gt;</code>\uff09\u90fd\u53ef\u884c\uff0cC++ \u4f1a\u4f18\u5148\u9009\u62e9\u6bd4\u8f83\u64cd\u4f5c\u7b26\u3002\u5982\u679c\u5019\u9009\u7684\u662f\u7528\u6237\u5b9a\u4e49\u7684\u8f6c\u6362\u51fd\u6570\uff0c\u8fd8\u6709\u5176\u4ed6\u89c4\u5219\u6bd4\u6211\u5217\u51fa\u7684\u89c4\u5219\u66f4\u4f18\u5148\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u6211\u76f8\u4fe1\u6211\u6240\u5c55\u793a\u7684\u4e09\u4e2a\u51b3\u5b9a\u56e0\u7d20\u662f\u6700\u91cd\u8981\u7684\u3002</p> <p>\u6bcb\u5eb8\u7f6e\u7591\uff0c\u5982\u679c\u7f16\u8bd1\u5668\u68c0\u67e5\u4e86\u6bcf\u4e00\u4e2a\u6761\u4ef6\uff0c\u5374\u6ca1\u6709\u627e\u5230\u4e00\u4e2a\u660e\u786e\u7684\u58f0\u660e\uff0c\u90a3\u4e48\u7f16\u8bd1\u5c31\u4f1a\u5931\u8d25\u3002</p>"},{"location":"Blogs/Basics/How%20c%2B%2B%20Resolves%20a%20Funciton%20Call/#after-the-function-call-is-resolved","title":"After the Function Call Is Resolved","text":"<p>\u65c5\u7a0b\u5230\u6b64\u7ed3\u675f\u3002\u7f16\u8bd1\u5668\u73b0\u5728\u5df2\u7ecf\u77e5\u9053 <code>blast(ast, 100)</code> \u8868\u8fbe\u5f0f\u5e94\u8be5\u8c03\u7528\u54ea\u4e2a\u51fd\u6570\u4e86\u3002\u4e0d\u8fc7\uff0c\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u7f16\u8bd1\u5668\u5728\u89e3\u6790\u51fd\u6570\u8c03\u7528\u540e\u8fd8\u6709\u66f4\u591a\u5de5\u4f5c\u8981\u505a\uff1a</p> <ul> <li>\u5982\u679c\u88ab\u8c03\u7528\u7684\u51fd\u6570\u662f\u4e00\u4e2a\u7c7b\u6210\u5458\uff0c\u7f16\u8bd1\u5668\u5fc5\u987b\u68c0\u67e5\u8be5\u6210\u5458\u7684\u8bbf\u95ee\u89c4\u8303\uff0c\u4ee5\u786e\u5b9a\u8c03\u7528\u8005\u662f\u5426\u53ef\u4ee5\u8bbf\u95ee\u8be5\u6210\u5458\u3002</li> <li>\u5982\u679c\u88ab\u8c03\u7528\u7684\u51fd\u6570\u662f\u6a21\u677f\u51fd\u6570\uff0c\u7f16\u8bd1\u5668\u4f1a\u5c1d\u8bd5\u5b9e\u4f8b\u5316\u8be5\u6a21\u677f\u51fd\u6570\uff0c\u524d\u63d0\u662f\u5176\u5b9a\u4e49\u53ef\u89c1\u3002</li> <li>\u5982\u679c\u88ab\u8c03\u7528\u7684\u51fd\u6570\u662f\u865a\u62df\u51fd\u6570\uff0c\u7f16\u8bd1\u5668\u4f1a\u751f\u6210\u7279\u6b8a\u7684\u673a\u5668\u6307\u4ee4\uff0c\u4ee5\u4fbf\u5728\u8fd0\u884c\u65f6\u8c03\u7528\u6b63\u786e\u7684\u8986\u76d6\u3002</li> </ul> <p>\u8fd9\u7bc7\u6587\u7ae0\u5e76\u4e0d\u5305\u542b\u4efb\u4f55\u65b0\u4fe1\u606f\u3002\u5b83\u57fa\u672c\u4e0a\u662f\u5bf9 cppreference.com \u5df2\u7ecf\u63cf\u8ff0\u8fc7\u7684\u7b97\u6cd5\u7684\u6d53\u7f29\u89e3\u91ca\uff0c\u800c cppreference \u53c8\u662f C++\u6807\u51c6 \u7684\u6d53\u7f29\u7248\u672c\u3002\u4e0d\u8fc7\uff0c\u8fd9\u7bc7\u6587\u7ae0\u7684\u76ee\u7684\u662f\u4f20\u8fbe\u4e3b\u8981\u6b65\u9aa4\uff0c\u800c\u4e0d\u6d89\u53ca\u7ec6\u8282\u3002\u8ba9\u6211\u4eec\u56de\u987e\u4e00\u4e0b\uff0c\u7a76\u7adf\u6709\u591a\u5c11\u7ec6\u8282\u88ab\u7701\u7565\u4e86\u3002\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u8fd8\u771f\u4e0d\u7b80\u5355\uff1a</p> <ul> <li>\u975e\u9650\u5b9a\u540d\u79f0\u67e5\u627e\u6709\u4e00\u6574\u5957\u89c4\u5219\u3002</li> <li>\u53c2\u6570\u4f9d\u8d56\u67e5\u627e\u6709\u4e00\u5957\u89c4\u5219\u3002</li> <li>\u6210\u5458\u540d\u79f0\u67e5\u627e\u4e5f\u6709\u81ea\u5df1\u7684\u89c4\u5219\u3002</li> <li>\u6a21\u677f\u53c2\u6570\u63a8\u5bfc\u6709\u4e00\u5957\u89c4\u5219\u3002</li> <li>SFINAE\u89c4\u5219\u3002</li> <li>\u9690\u5f0f\u8f6c\u6362\u6709\u4e00\u5957\u89c4\u5219\u3002</li> <li>C++20 \u5e26\u6765\u7684 <code>concept</code> and <code>constraint</code></li> <li>\u6709\u4e00\u5957\u89c4\u5219\u53ef\u4ee5\u786e\u5b9a\u54ea\u4e9b\u9690\u5f0f\u8f6c\u6362\u6bd4\u5176\u4ed6\u8f6c\u6362\u66f4\u597d</li> <li>\u4e00\u5957\u89c4\u5219\u53ef\u4ee5\u786e\u5b9a\u54ea\u4e2a\u51fd\u6570\u6a21\u677f\u6bd4\u53e6\u4e00\u4e2a\u51fd\u6570\u6a21\u677f\u66f4\u4e13\u4e1a\u3002</li> </ul>"},{"location":"Blogs/Basics/How%20c%2B%2B%20Resolves%20a%20Funciton%20Call/#_1","title":"\u7ed3\u675f","text":""},{"location":"Blogs/Basics/The%20Two%27s%20Componet/","title":"Two's Complement","text":"<p>Straight to the hell:</p>"},{"location":"Blogs/Basics/The%20Two%27s%20Componet/#why-inversion-and-adding-one-works","title":"Why Inversion and Adding One Works","text":"<p>Invert and add one, Invert and add one. It works, but why?</p> <p>Inverting and adding one might sound like a stupid thing to do, but it's actually just a mathematical shortcut of a rather straightforward computation.</p>"},{"location":"Blogs/Basics/The%20Two%27s%20Componet/#borrowing-and-subtraction","title":"Borrowing and Subtraction","text":"<p>Remember the old trick we learned in first grade of \"borrowing one's\" from future ten's places to perform a subtraction? You may not, so I'll go over it. As an example, I'll do 93702 minus 58358.</p> <pre><code>  93702\n- 58358\n-------\n</code></pre> <p>Now, then, what's the answer to this computation? We'll start at the least significant digit, and subtract term by term. We can't subtract 8 from 2, so we'll borrow a digit from the next most significant place (the tens place) to make it 12 minus 8. 12 minus 8 is 4, and we note a 1 digit above the ten's column to signify that we must remember to subtract by one on the next iteration.</p> <pre><code>     1\n  93702\n- 58358\n-------\n      4\n</code></pre> <p>This next iteration is 0 minus 5, and minus 1, or 0 minus 6. Again, we can't do 0 minus 6, so we borrow from the next most significant figure once more to make that 10 minus 6, which is 4.</p> <pre><code>    11\n  93702\n- 58358\n-------\n     44\n</code></pre> <p>This next iteration is 7 minus 3, and minus 1, or 7 minus 4. This is 3. We don't have to borrow this time.</p> <pre><code>    11\n  93702\n- 58358\n-------\n    344\n</code></pre> <p>This next iteration is 3 minus 8. Again, we must borrow to make thi 13 minus 8, or 5.</p> <pre><code>  1 11\n  93702\n- 58358\n-------\n   5344\n</code></pre> <p>This next iteration is 9 minus 5, and minus 1, or 9 minus 6. This is 3. We don't have to borrow this time.</p> <pre><code>  1 11\n  93702\n- 58358\n-------\n  35344\n</code></pre> <p>So 93702 minus 58358 is 35344.</p>"},{"location":"Blogs/Basics/The%20Two%27s%20Componet/#borrowing-and-its-relevance-to-the-negative-of-a-number","title":"Borrowing and it's Relevance to the Negative of a Number","text":"<p>When you want to find the negative of a number, you take the number, and subtract it from zero. Now, suppose we're really stupid, like a computer, and instead of simply writing a negative sign in front of a number A when we subtract A from 0, we actually go through the steps of subtracting A from 0.</p> <p>Take the following idiotic computation of 0 minus 3:</p> <pre><code>              1        11       111      1111\n000000    000000    000000    000000    000000\n-    3    -    3    -    3    -    3    -    3\n------    ------    ------    ------    ------\n               7        97       997      9997\n</code></pre> <p>Et cetera, et cetera. We'd wind up with a number composed of a 7 in the one's digit, a 9 in every digit more significant than the 100's place.</p>"},{"location":"Blogs/Basics/The%20Two%27s%20Componet/#the-same-in-binary","title":"The Same in Binary","text":"<p>We can do more or less the same thing with binary. In this example I use 8 bit binary numbers, but the principle is the same for both 8 bit binary numbers (chars) and 32 bit binary numbers (ints). I take the number 75 (in 8 bit binary that is 010010112) and subtract that from zero.</p> <p>Sometimes I am in the position where I am subtracting 1 from zero, and also subtracting another borrowed 1 against it.</p> <pre><code>                      1            11           111          1111\n  00000000      00000000      00000000      00000000      00000000\n- 01001011    - 01001011    - 01001011    - 01001011    - 01001011\n----------    ----------    ----------    ----------    ----------\n                       1            01           101          0101\n\n    11111        111111       1111111      11111111\n  00000000      00000000      00000000      00000000\n- 01001011    - 01001011    - 01001011    - 01001011\n----------    ----------    ----------    ----------\n     10101        110101       0110101      10110101\n</code></pre> <p>If we wanted we could go further, but there would be no point. Inside of a computer the result of this computation would be assigned to an eight bit variable, so any bits beyond the eighth would be discarded.</p> <p>With the fact that we'll simply disregard any extra digits in mind, what difference would it make to the end result to have subtracted 01001011 from 100000000 (a one bit followed by 8 zero bits) rather than 0? There is none. If we do that, we wind up with the same result:</p> <pre><code> 11111111\n 100000000\n- 01001011\n----------\n 010110101\n</code></pre> <p>So to find the negative of an n-bit number in a computer, subtract the number from 0 or subtract it from 2n. In binary, this power of two will be a one bit followed by n zero bits.</p> <p>In the case of 8-bit numbers, it will answer just as well if we subtract our number from (1 + 11111111) rather than 100000000.</p> <pre><code>         1\n+ 11111111\n- 01001011\n----------\n</code></pre> <p>In binary, when we subtract a number A from a number of all 1 bits, what we're doing is inverting the bits of A. So the subtract operation is the equivalent of inverting the bits of the number. Then, we add one.</p> <p>So, to the computer, taking the negative of a number, that is, subtracting a number from 0, is the same as inverting the bits and adding one, which is where the trick comes from.</p>"},{"location":"Blogs/Basics/The%20Two%27s%20Componet/#end","title":"End","text":"<p>Love from 2000's.</p>"},{"location":"Blogs/Basics/Value%20Catagorys/","title":"Lvalues and Rvalues","text":""},{"location":"Blogs/Basics/Value%20Catagorys/#_1","title":"\u5b9a\u4e49","text":"<p>\u5de6\u503c\u548c\u53f3\u503c</p> <p>C++17\u6807\u51c6\u5b9a\u4e49\u4e86\u8868\u8fbe\u5f0f\u7684\u503c\u7c7b\u522b\u5982\u4e0b\uff1a</p> <ul> <li>glvalue \u6cdb\u5de6\u503c</li> </ul> <p>is an expression whose evaluation determines the identity of an object, bit-field, or function.</p> <p>\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u5176\u503c\u53ef\u786e\u5b9a\u67d0\u4e2a\u5bf9\u8c61\u6216\u51fd\u6570\u7684\u6807\u8bc6\u3002</p> <ul> <li>prvalue \u7eaf\u53f3\u503c</li> </ul> <p>is an expression whose evaluation initializes an object or a bit-field, or computes the value of the operand of an operator, as specified by the context in which it appears.</p> <p>\u6839\u636e\u5176\u51fa\u73b0\u7684\u4e0a\u4e0b\u6587\uff0c\u521d\u59cb\u5316\u4e00\u4e2a\u5bf9\u8c61\u6216\u8005\u4f4d\u57df\uff0c\u6216\u8005\u8ba1\u7b97\u4e00\u4e2a\u8fd0\u7b97\u7b26\u7684\u64cd\u4f5c\u6570\u7684\u503c\u3002</p> <ul> <li>xvalue \u4ea1\u503c</li> </ul> <p>is a glvalue that denotes an object or bit-field whose resources can be reused (usually because it is near the end of its lifetime). Example: Certain kinds of expressions involving rvalue references yield xvalues, such as a call to a function whose return type is an rvalue reference or a cast to an rvalue reference type.</p> <p>xvalue \u662f\u4e00\u4e2a glvalue\uff0c\u8868\u793a\u5176\u8d44\u6e90\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\uff08\u901a\u5e38\u662f\u56e0\u4e3a\u5176\u751f\u547d\u5468\u671f\u5373\u5c06\u7ed3\u675f\uff09\u7684\u5bf9\u8c61\u6216\u4f4d\u57df\u3002\u4f8b\u5982\uff1a\u67d0\u4e9b\u6d89\u53ca\u53f3\u503c\u5f15\u7528\u7684\u8868\u8fbe\u5f0f\u4f1a\u4ea7\u751fxvalues\uff0c\u6bd4\u5982\u8c03\u7528\u8fd4\u56de\u7c7b\u578b\u4e3a\u53f3\u503c\u5f15\u7528\u7684\u51fd\u6570 \u6216\u8005 \u8f6c\u6362\u5230\u53f3\u503c\u5f15\u7528\u7c7b\u578b</p> <ul> <li>lvalue</li> </ul> <p>\u4e0d\u662f\u4ea1\u503c\u7684\u6cdb\u5de6\u503c</p> <ul> <li>rvalue</li> </ul> <p>\u7eaf\u53f3\u503c\u6216\u8005\u4ea1\u503c</p>"},{"location":"Blogs/Basics/Value%20Catagorys/#_2","title":"\u7b80\u77ed\u7684\u9610\u8ff0","text":"<p>\u4e00\u4e2a\u5de6\u503c\u4f1a\u62e5\u6709\u4e00\u4e2a\u4f60\u7684\u7a0b\u5e8f\u53ef\u8bbf\u95ee\u7684\u5730\u5740\u3002\u5de6\u503c\u8868\u8fbe\u5f0f\u5305\u62ec\uff1a\u53d8\u91cf\u540d\uff0cconst \u53d8\u91cf\uff0c\u6570\u7ec4\u5143\u7d20\uff0c\u8c03\u7528\u8fd4\u56de\u5de6\u503c\u5f15\u7528\u7684\u51fd\u6570\uff0c\u4f4d\u57df\uff0c\u8054\u5408\u4f53\uff0c\u6216\u8005\u7c7b\u6210\u5458\u3002</p> <p>\u4e00\u4e2a\u7eaf\u53f3\u503c\u8868\u8fbe\u5f0f\u4e0d\u5b58\u5728\uff08\u6216\u62e5\u6709\u4e00\u4e2a\u5408\u6cd5\u7684\u65b9\u5f0f\uff09\u53bb\u8bbf\u95ee\u5176\u5730\u5740\u3002\u7eaf\u53f3\u503c\u8868\u8fbe\u5f0f\u7684\u4f8b\u5b50\u6709\uff0c\u5b57\u9762\u91cf\uff0c\u8c03\u7528\u8fd4\u56de\u503c\u662f\u4e0d\u542b\u5f15\u7528\u7684\u7c7b\u578b\u7684\u51fd\u6570\uff0c\u5728\u8868\u8fbe\u5f0f\u8bc4\u4f30\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u7684\u4ec5\u7531\u7f16\u8bd1\u5668\u53ef\u4ee5\u8bbf\u95ee\u7684\u4e34\u65f6\u5bf9\u8c61\u3002</p> <p>\u4ea1\u503c\u8868\u8fbe\u5f0f\u7684\u5730\u5740\u4e0d\u518d\u80fd\u88ab\u7a0b\u5e8f\u8bbf\u95ee\uff0c\u4f46\u662f\u53ef\u4ee5\u88ab\u7528\u6765\u521d\u59cb\u5316\u4e00\u4e2a\u53f3\u503c\u5f15\u7528\uff0c\u4ece\u800c\u63d0\u4f9b\u5bf9\u8868\u8fbe\u5f0f\u7684\u8bbf\u95ee\u3002\u4f8b\u5982\uff0c\u8c03\u7528\u8fd4\u56de\u53f3\u503c\u5f15\u7528\u7684\u51fd\u6570\uff0c\u6570\u7ec4\u4e0b\u6807\u8bbf\u95ee\uff0c\u53f3\u503c\u5f15\u7528\u7c7b\u578b\u7684\u6570\u7ec4\u6216\u8005\u5bf9\u8c61\u7684\u6210\u5458\u6216\u8005\u6210\u5458\u6307\u9488</p>"},{"location":"Blogs/Basics/Value%20Catagorys/#_3","title":"\u603b\u7ed3","text":"<p>\u6700\u65e9\u662f\u6839\u636e\u662f\u5426\u662fidentity\u548cmoveable\u6765\u5206\u7c7b\u3002</p> <ul> <li>\u201chas identity\u201d \u2013 i.e. and address, a pointer, the user can determine whether two copies are identical, etc.</li> <li>\u201ccan be moved from\u201d \u2013 i.e. we are allowed to leave to source of a \u201ccopy\u201d in some indeterminate, but valid state</li> </ul> <pre><code>iM  im  Im\n  \\/  \\/\n  i    m\n</code></pre> <ul> <li>iM: has identity and cannot be moved from</li> <li>im: has identity and can be moved from (e.g. the result of casting an lvalue to a rvalue reference)</li> <li>Im: does not have identity and can be moved from</li> </ul> <p>Every value is either an lvalue or an rvalue.</p> <p>\u4e00\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c\u53ea\u53ef\u80fd\u662f\u5de6\u503c\u6216\u8005\u53f3\u503c\uff0c\u6216\u8005\u6cdb\u5de6\u503c\u548c\u7eaf\u53f3\u503c\u3002</p> <p>\u62e5\u6709\u8eab\u4efd\u7684\u8868\u8fbe\u5f0f\u88ab\u79f0\u4f5c\u201c\u6cdb\u5de6\u503c (glvalue) \u8868\u8fbe\u5f0f\u201d\u3002\u5de6\u503c\u548c\u4ea1\u503c\u90fd\u662f\u6cdb\u5de6\u503c\u8868\u8fbe\u5f0f\u3002\u53ef\u88ab\u79fb\u52a8\u7684\u8868\u8fbe\u5f0f\u88ab\u79f0\u4f5c\u201c\u53f3\u503c (rvalue) \u8868\u8fbe\u5f0f\u201d\u3002\u7eaf\u53f3\u503c\u548c\u4ea1\u503c\u90fd\u662f\u53f3\u503c\u8868\u8fbe\u5f0f\u3002</p> <p>An lvalue is not an rvalue and an rvalue is not an lvalue.</p> <p>\u6211\u4eec\u8ba8\u8bba\u7684\u6bd4\u8f83\u591a\u7684\u4e00\u822c\u8fd8\u662f\u6307\u6cdb\u5de6\u503c\u548c\u7eaf\u53f3\u503c\uff0c\u5373glvalue\u548cprvalue\u3002</p> <p>C++17 \u6709\u573a\u5408\u8981\u6c42\u590d\u5236\u6d88\u9664(copy elision)\uff0c\u7eaf\u53f3\u503c\u5df2\u4e0d\u53ef\u518d\u88ab\u79fb\u52a8\u3002</p>"},{"location":"Blogs/Chromium/","title":"Chromium","text":"<p>Analysis of Chromium source code.</p>"},{"location":"Blogs/Chromium/Chromium%27s%20CHECK%20macro/","title":"Chromium \u4e2d\u7684 CHECK \u5b8f","text":""},{"location":"Blogs/Chromium/Chromium%27s%20CHECK%20macro/#_1","title":"\u4e3b\u65e8","text":"<p>\u7406\u89e3\u8fd9\u6bb5\u4ee3\u7801</p> <pre><code>// Macro which uses but does not evaluate expr and any stream parameters.\n#define EAT_CHECK_STREAM_PARAMS(expr) \\\n  true ? (void)0                      \\\n       : ::logging::VoidifyStream(expr) &amp; (*::logging::g_swallow_stream)\nBASE_EXPORT extern std::ostream* g_swallow_stream;\n</code></pre>"},{"location":"Blogs/Chromium/Chromium%27s%20CHECK%20macro/#check","title":"\u4ec0\u4e48\u662f CHECK","text":"<p>CHECK \u662f\u4e00\u4e2a\u6761\u4ef6\u68c0\u67e5\u5b8f\uff0c\u7c7b\u4f3c\u4e8eassert\uff0c\u4f46\u662f\u63d0\u4f9b\u4e86\u53ef\u9009\u62e9\u7684\u6d41\u8f93\u51fa\uff08\u5c3d\u7ba1\u8fd9\u4e2a\u662f\u4e2adummy output\uff09\u3002</p> <p>\u4f7f\u7528\u8981\u68c0\u67e5\u7684\u6761\u4ef6\u8868\u8fbe\u5f0f\uff0c\u4f8b\u5982 <code>CHECK(object)</code> \u6216 <code>CHECK(!list.empty())</code>\u3002\u6709\u591a\u79cd\u884d\u751f\u65b9\u6cd5\uff0c\u4f8b\u5982 <code>CHECK_EQ</code>\u3001<code>CHECK_NE</code>\u3001<code>DCHECK</code> \u548c <code>DCHECK_CALLED_ON_VALID_SEQUENCE</code>\u3002</p> <p>\u5982\u679c\u6761\u4ef6\u4e0d\u7b26\u5408\u9884\u671f\uff0c\u5b83\u5c06\u7acb\u5373\u5d29\u6e83\uff08Crash\uff09\uff0c\u8f93\u51fa\u4e00\u6761\u6d88\u606f\u548c\u5806\u6808\u8ddf\u8e2a\uff0c\u8868\u660e\u5f53\u65f6\u7684\u6761\u4ef6\u68c0\u67e5\u5931\u8d25\uff0c\u5e76\u503e\u5411\u4e8e\u9000\u51fa\uff08\u53d6\u51b3\u4e8e\u6807\u5fd7\uff09\u3002\u6d88\u606f\u53ef\u4ee5\u8fd9\u6837\u786e\u5b9a\uff1a</p> <pre><code>CHECK(object) &lt;&lt; \"object must be set\";\n</code></pre>"},{"location":"Blogs/Chromium/Chromium%27s%20CHECK%20macro/#check_1","title":"CHECK \u884c\u4e3a\u7684\u5dee\u5f02","text":""},{"location":"Blogs/Chromium/Chromium%27s%20CHECK%20macro/#when-flagged-official_build-dcheck_is_on","title":"When flagged OFFICIAL_BUILD &amp;&amp; !DCHECK_IS_ON","text":"<p>\u5f53 <code>CHECK</code> \u65ad\u8a00\u65e0\u8bba\u6210\u529f\u548c\u5931\u8d25\uff0c\u5c3e\u968f\u7684\u6d41\u8f93\u5165\u662f\u4f1a\u88ab\u820d\u5f03\u7684\uff0c\u5c06\u4e0d\u4f1a\u6253\u5370\uff0cSource Here\u3002</p> <p>\u6b64\u65f6\uff0c<code>CHECK</code> \u7684\u5b8f\u5b9e\u73b0\u4e3a\uff1a</p> <pre><code>#define CHECK(condition) \\\n  UNLIKELY(!(condition)) ? logging::CheckFailure() : EAT_CHECK_STREAM_PARAMS()\n</code></pre> <p><code>UNLIKELY</code> \u662f\u5206\u652f\u9884\u6d4b\uff0c\u5728gcc\u4e0a\u4f1a\u4f7f\u7528<code>__builtin_expect</code>\u5f00\u6d1e\u4f18\u5316\u5206\u652f\u9009\u62e9\uff0cmsvc\u5c31\u76f4\u63a5\u65e0\u89c6\u3002</p> <pre><code>// Macro for hinting that an expression is likely to be false.\n#if !defined(UNLIKELY)\n#if defined(COMPILER_GCC) || defined(__clang__)\n#define UNLIKELY(x) __builtin_expect(!!(x), 0)\n#else\n#define UNLIKELY(x) (x) // msvc\n#endif  // defined(COMPILER_GCC)\n#endif  // !defined(UNLIKELY)\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\uff0c\u5f53condition \u4e3a false\uff0c\u4f1a\u76f4\u63a5 <code>CheckFailure()</code>\uff0c\u8fd9\u662f\u4e00\u4e2a noreachable \u7684 immediate crash\u3002</p> <pre><code>[[noreturn]] IMMEDIATE_CRASH_ALWAYS_INLINE void CheckFailure() {\n  base::ImmediateCrash();\n}\n</code></pre> <p>\u5f53\u6761\u4ef6\u4e3a\u771f\uff0c\u610f\u5473\u7740CHECK\u662f\u7b26\u5408\u64cd\u4f5c\u7684\uff0c\u6211\u4eec\u9700\u8981\u62b9\u6389 CHECK \u540e\u9762\u53ef\u80fd\u643a\u5e26\u7684\u6d41\u64cd\u4f5c\u3002\u8fd9\u65f6\u5019\u4f1a\u4e09\u76ee\u8fd0\u7b97\u7b26\u4f1a\u8d70\u5230 <code>EAT_CHECK_STREAM_PARAMS</code>\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0c\u4e3a\u4e86\u6548\u7387\uff0c\u6211\u4eec\u540c\u65f6\u4e0d\u5e0c\u671b\u8fd9\u4e2a\u6d41\u5728\u7f16\u8bd1\u65f6\u88ab\u8bc4\u4f30\uff01\u5c31\u50cf\u4ed6\u4e0d\u5b58\u5728\u4e00\u6837\u3002</p> <p>\u4ed4\u7ec6\u7406\u89e3\u8fd9\u6bb5\u4ee3\u7801\uff1a</p> <pre><code>// Macro which uses but does not evaluate expr and any stream parameters.\n#define EAT_CHECK_STREAM_PARAMS(expr) \\\n  true ? (void)0                      \\\n       : ::logging::VoidifyStream(expr) &amp; (*::logging::g_swallow_stream)\nBASE_EXPORT extern std::ostream* g_swallow_stream;\n</code></pre> <p>\u4e4d\u4e00\u770b\uff0c\u65e2\u7136\u6052\u4e3atrue\uff0c\u4f3c\u4e4e\u548c <code>(void)0</code> \u6052\u7b49\uff0c\u79c9\u7740 code clean \u7684\u884c\u4e3a\uff0c\u4e0d\u5982\u76f4\u63a5\u66ff\u6362\u3002\u8fd9\u91cc\u662f\u4e00\u4e2a\u6700\u5c0f\u5b9e\u73b0\u3002</p> <p>\u53ef\u4ee5\u89c2\u5bdf\u5230\uff0c\u7b80\u5355\u7684 <code>(void)0</code> \u5728\u6b63\u5e38\u60c5\u51b5\u4e0b\u662f\u53ef\u4ee5\u5de5\u4f5c\uff0c\u4f46\u662f\uff0c\u5f53\u4f60\u5c1d\u8bd5\u5728 CHECK \u540e\u9762\u585e\u4e00\u4e2a <code>&lt;&lt; \"what a stream?\"</code>\uff0c\u7f16\u8bd1\u5931\u8d25\u4e86\u3002\u5e76\u6ca1\u6709\u8fbe\u5230 <code>EAT_CHECK_STREAM_PARAMS</code> \u7684\u9884\u671f\u76ee\u7684\u3002</p> <p>\u5c06\u5b8f\u5c55\u5f00\u89c2\u5bdf\uff1a</p> <pre><code>UNLIKELY(!(condition)) ? logging::CheckFailure() : (void)0 &lt;&lt; \"what a stream?\"  // Oops...\n\n// invalid operand&lt;&lt; between 'void' and 'const char[14]' !\n</code></pre> <p>noticing: \u6761\u4ef6\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7 <code>&lt;&lt;</code>(shift left) &gt; <code>&amp;</code>(bit operand) &gt; <code>?:</code>\u3002</p> <p>\u5bfc\u81f4, <code>operator&lt;&lt;</code> \u5728\u8fd9\u91cc\u88ab\u5f53\u4f5c\u4f4d\u79fb\u64cd\u4f5c\uff0c\u4e14\u4f18\u5148\u7ea7\u5927\u4e8e <code>?:</code>\uff0c\u6240\u4ee5\u4f1a\u4f18\u5148\u8bc4\u4f30 <code>(void)0 &lt;&lt; \"what a stream?\"</code>\u3002</p> <p>\u6240\u4ee5\uff0c\u6211\u4eec\u9700\u8981 <code>EAT_CHECK_STREAM_PARAMS(expr)</code> \u540c\u65f6\uff1a</p> <ul> <li>\u6052\u8bc4\u4f30\u4e3a<code>(void)0</code>\uff0c\uff08due to CheckFailure() is void\uff0c the third-operand must , to make program legal, be void or throw. check this\uff09</li> <li>\u4e14\u53c8\u80fd\u5438\u6536\u6389\u540e\u9762\u7684 <code>operator&lt;&lt;</code></li> </ul> <p>Now, consider this:</p> <pre><code>#define CHECK(condition) \\\n  UNLIKELY(!(condition)) ? logging::CheckFailure() : true ? (void)0 \\\n       : something &amp; (*::logging::g_swallow_stream) &lt;&lt; \"what a stream\"\n</code></pre> <p>\u5728\u8fd9\u91cc\uff0c<code>true ? (void)0 : expr</code> \u4fdd\u8bc1\u4e86\u8fd9\u6bb5\u8868\u8fbe\u5f0f\u6052\u4e3a(void)0\u3002</p> <p>\u6211\u4eec\u53ea\u9700\u8981\u4e00\u4e2a dummy stream <code>(*::logging::g_swallow_stream)</code> \u7528\u4e8e\u5438\u6536\u6d88\u606f\u3002\u6b64 <code>std::ostream</code> \u7684\u8f93\u51fa\u5c06\u6309\u539f\u6837\u4e22\u5f03\u3002</p> <p>\u9700\u8981\u6784\u9020\u4e00\u4e2a\u540c\u6837\u662f <code>void</code> \u7684 <code>expr</code>, \u4e14\u6267\u884c\u4f18\u5148\u7ea7\u665a\u4e8e <code>operator&lt;&lt;</code>\uff0c \u8fd9\u6837<code>operator&lt;&lt;</code>\u5c31\u4f1a\u5148\u541e\u6389\u540e\u9762\u7684\u6d41\uff0c\u7136\u540e\u518d\u901a\u8fc7 something \u7684 <code>operator &amp;</code> \u64cd\u4f5c, \u628a\u6d41\u4ea7\u751f\u7684 <code>std::ostream</code> \u6d88\u5316\u6389\u3002</p> <p>\u8003\u8651\uff0c\u5f53\u8fd9\u4e2a something \u662f <code>::logging::VoidifyStream(expr)</code> \u7684\u65f6\u5019\uff1a</p> <pre><code>class VoidifyStream {\n public:\n  VoidifyStream() = default;\n  explicit VoidifyStream(bool) {}\n\n  // This operator has lower precedence than &lt;&lt; but higher than ?:\n  void operator&amp;(std::ostream&amp;) {}\n};\n</code></pre> <p>\u8fd9\u4e2a <code>dummy stream</code> \u5148\u5403\u5b8c\u5148\u5403\u5b8c\u540e\u9762\u7684\u6d41\uff0c\u7136\u540e\u4ea7\u751f\u7684 <code>std::ostream</code> \u518d\u88ab <code>VoidifyStream</code> \u7684 <code>operator &amp;</code>\u64cd\u4f5c\u5403\u4e86\u3002</p> <p>which uses but does not evaluate expr and any stream parameters.</p>"},{"location":"Blogs/Chromium/Chromium%27s%20CHECK%20macro/#while-not-flagged-official_build-dcheck_is_on","title":"While not flagged OFFICIAL_BUILD &amp;&amp; !DCHECK_IS_ON","text":"<p>\u4f1a\u5f00\u542f <code>CHECK</code> \u65ad\u8a00\u5931\u8d25\u6253\u5370\u7684\u6d41\uff0cSource Here\u3002</p> <p>\u6b64\u65f6\uff0c<code>CHECK</code> \u7684\u5b8f\u5b9e\u73b0\u4e3a:</p> <pre><code>#define CHECK(condition)                                                \\\n  LOGGING_CHECK_FUNCTION_IMPL(::logging::CheckError::Check(#condition), \\\n                              condition)\n</code></pre> <p><code>::logging::CheckError::Check(#condition)</code>\u7684\u5b9e\u73b0\u5982\u4e0b\uff1a</p> <pre><code>// Declaration\nstatic CheckError Check(\n    const char* condition,\n    const base::Location&amp; location = base::Location::Current());\n\n// Defination\nCheckError CheckError::Check(const char* condition,\n                             const base::Location&amp; location) {\n  auto* const log_message = new LogMessage(\n      location.file_name(), location.line_number(), LOGGING_FATAL);\n  log_message-&gt;stream() &lt;&lt; \"Check failed: \" &lt;&lt; condition &lt;&lt; \". \";\n  return CheckError(log_message);\n}\n</code></pre> <p><code>CheckError</code>\u662f\u4e00\u4e2a Factory Class\uff0c\u6784\u9020\u51fa<code>#condition</code>\u7684\u4fe1\u606f\u9644\u52a0\u4e0a\u4ee3\u7801\u7684 location info, \u8fd4\u56de\u643a\u5e26\u8fd9\u4e9binfo\u7684\u4e00\u4e2a <code>CheckError</code>\u3002</p> <p>\u8fd9\u662f<code>LOGGING_CHECK_FUNCTION_IMPL</code>\u5b8f\uff0c</p> <pre><code>#define LOGGING_CHECK_FUNCTION_IMPL(check_stream, condition)              \\\n  switch (0)                                                              \\\n  case 0:                                                                 \\\n  default:                                                                \\\n    /* Hint to the optimizer that `condition` is unlikely to be false. */ \\\n    /* The optimizer can use this as a hint to place the failure path */  \\\n    /* out-of-line, e.g. at the tail of the function. */                  \\\n    if (const bool probably_true = static_cast&lt;bool&gt;(condition);          \\\n        LIKELY(ANALYZER_ASSUME_TRUE(probably_true)))                      \\\n      ;                                                                   \\\n    else                                                                  \\\n      (check_stream)\n</code></pre> <p>\u6211\u4eec\u5047\u8bbe <code>CHECK(1&gt;2) &lt;&lt; \"one is greater than two\"</code>\uff0c\u5c55\u5f00\u7ed3\u679c\u4f1a\u662f\u5982\u4e0b\uff0c</p> <pre><code>  switch (0)                                                              \\\n  case 0:                                                                 \\\n  default:                                                                \\\n    /* Hint to the optimizer that `condition` is unlikely to be false. */ \\\n    /* The optimizer can use this as a hint to place the failure path */  \\\n    /* out-of-line, e.g. at the tail of the function. */                  \\\n    if (const bool probably_true = static_cast&lt;bool&gt;(1&gt;2);          \\\n        LIKELY(ANALYZER_ASSUME_TRUE(probably_true)))                      \\\n      ;                                                                   \\\n    else                                                                  \\\n      ::logging::CheckError &lt;&lt; \"one is greater than two\"\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\uff0c\u5f53condition\u6210\u7acb\u7684\u65f6\u5019\uff0c\u5206\u652f\u4f1a\u8d70\u5230if\u91cc\uff0c\u56e0\u4e3a\u7edd\u5927\u90e8\u5206\u65ad\u8a00\u90fd\u503e\u5411\u4e8e\u6210\u529f\u7684\u9a8c\u8bc1\uff0c\u8fd9\u91cc\u4f9d\u7136\u8fdb\u884c\u4e86\u5206\u652f\u4f18\u5316\u3002</p> <p>\u5728condition\u4e0d\u6210\u7acb\u7684\u65f6\u5019\uff0c\u5c31\u8d70\u5230\u4e86<code>CheckError</code>\u3002</p> <p>\u5e76\u4e14\u7531\u4e8e<code>CheckError</code> \u91cd\u8f7d\u4e86 <code>operator&lt;&lt;</code>(Source Here)\uff0c\u4f1a\u628a\u540e\u9762\u7684Log\u5199\u5165\u5230stream\u91cc\u3002</p> <p>\u5728 <code>CheckError</code> \u6790\u6784\u7684\u65f6\u5019\uff1a</p> <pre><code>CheckError::~CheckError() {\n  // TODO(crbug.com/1409729): Consider splitting out CHECK from DCHECK so that\n  // the destructor can be marked [[noreturn]] and we don't need to check\n  // severity in the destructor.\n  const bool is_fatal = log_message_-&gt;severity() == LOGGING_FATAL;\n  // Note: This function ends up in crash stack traces. If its full name\n  // changes, the crash server's magic signature logic needs to be updated.\n  // See cl/306632920.\n  delete log_message_;\n\n  // Make sure we crash even if LOG(FATAL) has been overridden.\n  // TODO(crbug.com/1409729): Remove severity checking in the destructor when\n  // LOG(FATAL) is [[noreturn]] and can't be overridden.\n  if (is_fatal) {\n    base::ImmediateCrash();\n  }\n}\n</code></pre> <p>\u9996\u5148\u4f1a\u5224\u65ad\u5185\u90e8<code>log_message_</code>\u7684\u7b49\u7ea7\uff0c\u5982\u679c\u662f<code>fatal</code>\u5c31\u76f4\u63a5<code>immediate crash</code>\u3002</p> <p>\u5728crash\u4e4b\u524d\u4f1a\u5148\u628a<code>log_message_</code>\u91ca\u653e\u3002\u8fd9\u4e2a<code>::logging::LogMessage</code>\u5728\u6790\u6784\u7684\u65f6\u5019\u4f1a\u628a\u4e4b\u524d\u7684stream\u7684log\u5168\u90e8\u91ca\u653e\u6253\u5370\uff0cthe procedure is quite quite complex\uff0cSource Here</p> <p>\u8fd9\u6837\u5b50\uff0c\u5c31\u4f1a\u5728\u89e6\u53d1_debug_point\u4e4b\u524d\u628a\u5806\u6808\u4fe1\u606f\u548c\u8ffd\u52a0\u7684\u6d41\u65e5\u5fd7\u6253\u5370\u51fa\u6765\u3002</p> <p>\u5728\u8001\u4e00\u70b9\u7684\u7248\u672c\u4e2d\uff0c\u8fd8\u662f\u4f7f\u7528\u4e86\u548c\u4e09\u76ee\u8fd0\u7b97\u7b26\u7c7b\u4f3c\u7684\u6280\u6cd5\uff08\u4f8b\u5982\u5728106\u7248\u672c\u5185\u6838\uff09\u800c\u4e0d\u662f<code>switch</code>\uff0c\u5206\u6790\u539f\u7406\u548c\u65b9\u5f0f\u65e0\u5f02\u3002</p>"},{"location":"Blogs/Chromium/Chromium%27s%20MessagePump/","title":"Chromium's MessagePump","text":"<p>\u5728\u8ba8\u8bba\u4e0a\u770b\u5230\u8fd9\u6837\u4e00\u4e2a\u89e3\u91ca:</p> <p>MessageLoop is a task runner. It keeps a queue of Tasks, but it may also have other messages (platform-specific UI events, or platform-specific IO events) that it handles. Those platform specific messages are handled by the MessagePumps. Therefore, MessageLoop depends on MessagePumps.</p> <p>MessageLoop\u662f\u4e00\u4e2a<code>task runner</code>\uff0c\u4fdd\u5b58\u4e86\u4e00\u4e2a\u5404\u79cd\u4efb\u52a1\u7684\u961f\u5217\uff0c\uff08\u57fa\u4e8e\u5e73\u53f0\u7684 UI events \u6216\u8005\u57fa\u4e8e\u5e73\u53f0\u7684 IO events\uff09\u3002\u8fd9\u4e9b\u57fa\u4e8e\u5e73\u53f0\u7684\u6d88\u606f\u662f\u7531MessagePumps\u7ba1\u7406\u7684\u3002\u56e0\u6b64<code>MessageLoop</code>\u4f9d\u8d56\u4e8e<code>MessagePumps</code>\u3002</p> <p>\u7531\u4e8e\u8fd9\u4e2a\u56de\u7b54\u7684\u65f6\u95f4\u4e3a2011\u5e74\uff0c\u8003\u8651\u5230\u65f6\u6548\u6027\uff0c\u4e0d\u5177\u6709\u591a\u5927\u53c2\u8003\u4ef7\u503c\u3002</p> <p>\u521a\u63a5\u89e6\u5230\u8fd9\u4e00\u5757\uff0c\u6211\u4e5f\u4e0d\u592a\u660e\u767d\u5176\u4e2d\u7684\u590d\u6742\u7684\u903b\u8f91\u3002\u6240\u4ee5\u8fd9\u7bc7\u53ef\u80fd\u4ec5\u4ec5\u662f\u4e00\u4e2a\u7e41\u7410\u6ce8\u91ca\u7684\u7ffb\u8bd1\u89e3\u6790\uff08\u5e76\u4e14\u4e0d\u90a3\u4e48\u51c6\u786e\uff09</p>"},{"location":"Blogs/Chromium/Chromium%27s%20MessagePump/#background","title":"Background","text":"<p>\u6bcf\u4e2a<code>base::Thread</code>\uff08\u9664\u4e86\u4e3b\u7ebf\u7a0b\uff09\uff0c\u5728\u521b\u5efa\u7684\u65f6\u5019\u90fd\u4f1a\u62e5\u6709\u4e00\u4e2a<code>MessageLoop</code>\u3002\u6bcf\u4e2a\u8fdb\u7a0b\u81f3\u5c11\u6709\u4e24\u4e2a\u7ebf\u7a0b\u3002</p> <p>\u4e00\u4e2a\u4e3b\u7ebf\u7a0b\uff0c\u5728\u6d4f\u89c8\u5668\u8fdb\u7a0b\u4e2d\u4e3a<code>UI thread</code>\uff0c\u5728<code>Blink</code>\u6e32\u67d3\u8fdb\u7a0b\u4e2d\u4e3a<code>Blink main thread</code>\uff0c</p> <p>\u548c\u4e00\u4e2a<code>IO thread</code>\u3002</p> <p>\u8fd8\u4f1a\u6709\u6839\u636e\u5176\u4ed6\u9700\u6c42\u521b\u5efa\u7684\u4e00\u4e9b\u7279\u6b8a\u7528\u9014\u7684\u7ebf\u7a0b\u6216\u8005\u7ebf\u7a0b\u6c60\u3002</p> <p>\u5927\u591a\u6570\u7ebf\u7a0b\u6709\u4e00\u4e2a<code>loop</code>\uff0c\u8fd9\u4e2a\u5faa\u73af\u4ece\u961f\u5217\u4e2d\u83b7\u53d6<code>tasks</code>\u7136\u540e\u6267\u884c\u3002</p> <p>TODO: add more explainations</p>"},{"location":"Blogs/Chromium/Chromium%27s%20MessagePump/#message_pumph","title":"message_pump.h","text":"<p>Data: 2023/11/6</p> <p><code>MessagePump</code>\u7684\u57fa\u7c7b\uff0cinner class \u6709</p> <ul> <li><code>MessagePump::Delegate</code></li> <li><code>MessagePump::ScopedDoworkItem</code>\u3002</li> </ul> <p>\u4e0d\u77e5\u5230\u8c37\u72d7\u4e3a\u4ec0\u4e48\u559c\u6b22\u641e\u8fd9\u4e48\u591ainner class\uff0c\u57fa\u672c\u6bcf\u4e2a\u5768\u5768\u91cc\u90fd\u8981\u585e\u70b9\u3002</p> <p>\u5148\u770b<code>MessagePump</code>\uff0c\u4e3b\u8981\u6709\u56db\u79cd<code>MessagePumpType</code>(click to view):</p> <ul> <li> <p>DEFAULT</p> <p>This type of pump only supports tasks and timers.</p> </li> <li> <p>UI</p> <p>This type of pump also supports native UI events (e.g Windows messages).</p> </li> <li> <p>CUSTOM</p> <p>User provided implementation of MessagePump interface.</p> </li> <li> <p>IO</p> <p>This type of pump also supports asynchronous IO.</p> </li> </ul> <p>\u5e76\u4e14\u63d0\u4f9b\u4e86<code>Create</code>\u9759\u6001Factory Implementation:</p> <pre><code>// Creates the default MessagePump based on |type|. Caller owns return value.\nstatic std::unique_ptr&lt;MessagePump&gt; Create(MessagePumpType type);\n</code></pre> <p>\u6839\u636e<code>type</code>\u521b\u5efa\u5bf9\u5e94\u7684<code>MessagePump</code>\u3002</p>"},{"location":"Blogs/Chromium/Chromium%27s%20MessagePump/#message_pump_winh","title":"message_pump_win.h","text":"<p>\u7531\u4e8e\u5f00\u53d1\u73af\u5883\u662fWendous\uff0c\u8fd9\u91cc\u8bb2\u7684\u662f<code>MessagePump</code>\u5728wendows\u4e0b\u9762\u7684\u5934\u6587\u4ef6\u3002</p> <p><code>MEssagePumpWin</code>\u662f\u7ee7\u627f\u81ea<code>MessagePump</code>\u7684\uff0c\u4f5c\u4e3awindows\u4e0b<code>MessagePump</code>\u7684\u57fa\u7840\u3002</p> <p>\u6709\u4e00\u4e2ainner class<code>RunState</code>\u8bb0\u5f55\u4e86MessagePump\u7684\u72b6\u6001\u3002</p>"},{"location":"Blogs/Chromium/Chromium%27s%20MessagePump/#messagepumpforui","title":"MessagePumpForUI","text":"<p><code>MessagePumpForUI</code> \u662fwindows\u4e0bUI\u7ebf\u7a0b\u7684 message pump \u7684\u5177\u4f53\u5b9e\u4f8b\u3002 \u4e0d\u8fc7messagepump\u4f1a\u5728\u521d\u59cb\u5316\u7684\u65f6\u5019\uff0ccreate\u4e00\u4e2amessage windows\uff0c\u63a5\u53d7windows\u7684\u7cfb\u7edf\u7a97\u53e3\u6d88\u606f\u3002</p> <p><code>DoRunLoop</code>\u91cc\u662f\u5904\u7406\u6d88\u606f\u7684\u6b7b\u5faa\u73af\uff0c\u4e3b\u8981\u662f\uff1a</p> <ol> <li>ProcessNextWindowsMessage()</li> <li>delegate-&gt;DoWork()</li> <li>delegate-&gt;DoIdleWork()</li> <li>WaitForWork(next_work_info)</li> </ol> <p>\u8fd9\u91cc\u7684\u903b\u8f91\u5927\u6982\u5c31\u662f\uff0c\u5982\u679c\u6709\u53ef\u4ee5\u6267\u884c\u7684\u4efb\u52a1\uff0c\u5c31\u6267\u884c\u5b83\u5e76\u83b7\u53d6\u4e0b\u4e00\u6b21\u4efb\u52a1\u7684\u65f6\u95f4\uff08NextTaskInfo\uff09\uff0c\u8bbe\u7f6e\u4e0b\u4e00\u6b21\u4efb\u52a1\u7684\u65f6\u95f4\u3002\u5f53\u6240\u6709\u9700\u8981\u7acb\u5373\u6267\u884c\uff08immediate task\uff09\u7684\u4efb\u52a1\u6267\u884c\u5b8c\u6bd5\u540e\uff08\u5373\u83b7\u53d6\u5230\u7684\u4e0b\u4e00\u6b21\u4efb\u52a1\u7684\u5c5e\u6027is not immediate\uff09\uff0c\u5f00\u59cb\u6267\u884cidle\u4efb\u52a1\u3002</p> <p>idle\u4efb\u52a1\u5168\u90e8\u6267\u884c\u5b8c\uff0c\u5e76\u4e14\u6ca1\u6709\u66f4\u591a\u7684\u4efb\u52a1\uff0c\u5c31\u7b49\u5f85\uff08WaitForWork\uff09\u3002\u7136\u540e\u91cd\u590d\u4e0a\u9762\u7684\u8fc7\u7a0b\u3002</p>"},{"location":"Blogs/Chromium/Chromium%27s%20MessagePump/#processnextwindowsmessage","title":"ProcessNextWindowsMessage","text":"<p>\u5177\u4f53\u5730\uff0c\u5148\u5904\u7406windows\u7684\u6d88\u606f\uff0cpeekmessage\uff0ctranslate message\u7136\u540edispatch messasge\u4e4b\u7c7b\u7684\uff0c\u8fc7\u7a0b\u4e2d\u987a\u5e26\u901a\u77e5\u89c2\u5bdf\u8005\uff0c\u8fd9\u4e9b\u8bbe\u8ba1\u91cc\u89c2\u5bdf\u8005\u786e\u5b9e\u86ee\u591a\u7684\uff0c\u6709\u4e9b\u64cd\u4f5c\u9700\u8981\u88ab\u53ca\u65f6\u89c2\u6d4b\u5230\u4ee5\u505a\u51fa\u5bf9\u5e94\u7684\u5904\u7406\uff0cchromium\u7684blogs\u91cc\u9762\u6709\u8bb2\u5230\u8fd9\u4e00\u90e8\u5206\u3002</p>"},{"location":"Blogs/Chromium/Chromium%27s%20MessagePump/#dowork","title":"DoWork","text":"<p>\u7136\u540eDoWork\uff0c\u8fd9\u91cc\u7684delegate\u662f\u4e00\u4e2athread_local\u53d8\u91cf\uff0c \u5728\u8fd9\u91ccThreadControllerWithMessagePumpImpl override \u4e86<code>DoWork</code>\u3002</p> <p><code>DoWork</code>\u901a\u8fc7<code>DoWorkImpl</code>\u83b7\u53d6\u4e0b\u4e00\u6b21\u4efb\u52a1\u5524\u9192\u7684\u4fe1\u606f\u3002\u5982\u679c\u83b7\u53d6\u4e0d\u5230\uff0c\u610f\u5473\u7740\u6ca1\u6709\u66f4\u591a\u4efb\u52a1\u4e86\u3002\u8bbe\u7f6e\u4e0b\u4e00\u6b21\u5524\u9192\u65f6\u95f4\u4e3aTimeTicks::Max()\u3002</p> <p>\u5982\u679c\u83b7\u53d6\u5230\u7684\u4e0b\u4e00\u6b21\u7684\u4efb\u52a1\u4e0d\u662fimmediate\uff0c\u5c31<code>DoIdleWork</code>\u3002</p>"},{"location":"Blogs/Chromium/Chromium%27s%20MessagePump/#doworkimpl","title":"DoWorkImpl","text":"<p><code>DoWorkImpl</code>\u5927\u81f4\u4e0a\u662f\u4e00\u4e2a\u5faa\u73af\u53d6\u4efb\u52a1\u7684\u8fc7\u7a0b\uff0c\u6761\u4ef6\u662f\uff1a</p> <ul> <li>\u6307\u5b9ag_run_tasks_by_batches\uff08\u6279\u91cf\u6267\u884c\u4efb\u52a1flag\uff09</li> <li>batch_duration \u6ca1\u6709\u8d85\u65f6\uff08\u6279\u91cf\u6267\u884c\u4efb\u52a1\u7684\u6700\u5927\u65f6\u95f4\uff09</li> <li>work_batch_size \u6ca1\u6709\u5230\u8fbe\u4e0a\u9650\uff08\u53ef\u6279\u91cf\u6267\u884c\u4efb\u52a1\u6570\u91cf\uff09</li> </ul> <p>\u8fd9\u4e2ag_run_tasks_by_batches~~\u6211\u4e0d\u77e5\u9053\u662f\u4e2a\u4ec0\u4e48\u51e0\u628a\u8bed\u4e49~~\u662f\u5141\u8bb8\u6279\u91cf\u6267\u884c\u4efb\u52a1\uff0c\u5927\u81f4\u4e0a\uff0c\u5982\u679c\u4ee5\u4e0a\u6761\u4ef6\u6ee1\u8db3\uff0c\u5c31\u4ece<code>main_thread_only</code>\u91cc\u53d6\u53ef\u4ee5\u6267\u884c\u7684\u4efb\u52a1\u7136\u540e\u4ea4\u7ed9<code>task_annotator_</code>\u53bbRunTask\uff0c\u76f4\u5230\u5faa\u73af\u6761\u4ef6\u7ed3\u675f\uff0c\u5e76\u4e14\u6279\u91cf\u4efb\u52a1\u6267\u884c\u5b8c\u4e4b\u540e\uff0c\u8fd4\u56de\u4e0b\u4e00\u6b21\u7684\u53d6\u4efb\u52a1\u7684\u7b49\u5f85\u4fe1\u606f\u7ed9<code>DoWork</code>\u3002</p> <p>\u5177\u4f53\u4e0a\uff0c\u5faa\u73af\u91cd\u590d\u4ee5\u4e0b\u4e09\u4e2a\u8fc7\u7a0b\uff1a</p> <ol> <li> <p>\u901a\u8fc7<code>main_thread_only().task_source-&gt;SelectNextTask()</code>\u9009\u62e9\u4e00\u4e9b\u53ef\u4ee5\u6267\u884c\u7684\u4efb\u52a1\u8fdb\u884c\u6267\u884c</p> </li> <li> <p>\u8c03\u7528 <code>task_annotator_.RunTask()</code> \u6267\u884c\u4efb\u52a1</p> </li> <li> <p>\u6700\u540e\u901a\u8fc7<code>main_thread_only().task_source-&gt;GetPendingWakeUp()</code> \u83b7\u53d6\u4e0b\u4e00\u6b21\u8981\u6267\u884c\u7684\u4efb\u52a1\u3002\u8fd4\u56de\u7ed9\u6d88\u606f\u5faa\u73af\u4f5c\u4e3a\u4f11\u7720\u65f6\u95f4\u7684\u53c2\u8003\u3002</p> </li> </ol> <p>\u4e3a\u4e86\u5177\u4f53\u5730\u5206\u6790\u4ee5\u4e0a\u4e09\u4e2a\u6d41\u7a0b\uff0c\u9996\u5148\u9700\u8981\u4e86\u89e3\u4e00\u4e9b\u6982\u5ff5\u3002</p> <ul> <li>MainThreadOnly</li> </ul> <p>MainThreadOnly\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u5b58\u5728\u4e8e\u5f88\u591a\u7c7b\u4e2d\u5b9a\u4e49\u4e3a\u4e00\u4e2ainner class\u3002<code>MainThreadOnly</code>\u4e2d\u5b58\u653e\u7684\u6570\u636e\u4e00\u822c\u548c\u5f53\u524d\u7ebf\u7a0b\u7ed1\u5b9a\uff0c\u5e76\u4e14\u53ea\u5728\u5f53\u524d\u7ebf\u7a0b\u4e2d\u4f7f\u7528\u3002\u53ef\u4ee5\u4e0d\u7528\u52a0\u9501\u8bbf\u95ee\u3002</p> <ul> <li>AnyThread</li> </ul> <p>\u4e0eMainThreadOnly\u8bed\u4e49\u4e0a\u76f8\u5bf9\u7684\u662fAnyThread\u3002\u8fd9\u4e2a\u7ed3\u6784\u4f53\u53ef\u4ee5\u88ab\u5176\u4ed6\u4efb\u610f\u7ebf\u7a0b\u8bbf\u95ee\uff08\u9700\u8981\u6301\u9501\uff09\u3002\u4ee3\u7801\u4e2d\u4e5f\u53ef\u4ee5\u770b\u5230\uff0cAnyThread\u662f\u901a\u8fc7\u7f16\u8bd1\u5668\u6307\u4ee4\u6307\u5b9a\u4e86<code>GUARDED_BY(any_thread_lock)</code>\u4e92\u65a5\u9501\u3002</p> <ul> <li>SequenceManager</li> </ul> <p>\u6709\u5173SequenceManager\u53ef\u4ee5\u7ed3\u5408\u6709\u5173\u5206\u6790\u3002</p> <p><code>SequenceManager</code>\u7684<code>MainThreadOnly</code>\u4e2d\u6709\u4e00\u4e2a\u7ed3\u6784<code>WakeUpQueue</code>\uff0c\u800c<code>WakeUpQueue</code>\u901a\u8fc7\u4e00\u4e2a\u6700\u5c0f\u5806<code>IntrusiveHeap&lt;ScheduledWakeUp, std::greater&lt;&gt;&gt;</code>\u6765\u4fdd\u5b58\u591a\u4e2a<code>ScheduledWakeUp</code>\uff0c\u8fd9\u786e\u4fdddelay\u65f6\u95f4\u6700\u77ed\u7684\u5728\u6700\u4e0a\u9762\u3002</p> <pre><code>`ScheduledWakeUp`\u6301\u6709`TaskQueueImpl`\u5bf9\u8c61\u3002`TaskQueueImpl`\u4e2d\u7684`MainThreadOnly`\u548c`Anythread`\u5bf9\u8c61\u5206\u522b\u6301\u6709\uff1a\n</code></pre> <ul> <li> <p>MainThreadOnly::delayed_work_queue</p> </li> <li> <p>MainThreadOnly::immediate_work_queue</p> </li> <li> <p>MainThreadOnly::delayed_incoming_queue</p> </li> <li> <p>Anythread::immediate_incoming_queue</p> </li> </ul> <p>\u4e5f\u5c31\u662f\u8bf4\u4e00\u4e2a<code>SequenceManagerImpl</code>\u53ef\u4ee5\u7ba1\u7406\u591a\u4e2a<code>TaskQueueImpl</code>\u3002</p> <pre><code>\u5f53\u5ef6\u8fdf\u4efb\u52a1\u63d0\u4ea4\u540e\uff0c\u4f1a\u8fdb\u5165\u5230`delayed_incoming_queue`\uff0c\u5f53\u5230\u8fbe\u53ef\u6267\u884c\u65f6\u95f4\u540e\u63d0\u4ea4\u5230`delayed_work_queue`\uff0c\u7136\u540e\u53bb\u6267\u884c\u3002\u7acb\u5373\u6267\u884c\u7684\u4efb\u52a1\u5148\u63d0\u4ea4\u5230`immediate_incoming_queue`\uff0c\u7136\u540e\u7531\u76ee\u6807\u7ebf\u7a0b\u63d0\u4ea4\u5230`immediate_work_queue`\uff0c\u518d\u53bb\u6267\u884c\u3002\n</code></pre>"},{"location":"Blogs/Chromium/Chromium%27s%20MessagePump/#1selectnexttask","title":"\u8fc7\u7a0b\u30101\u3011\uff1aSelectNextTask","text":"<p><code>main_thread_only().task_source-&gt;SelectNextTask()</code>\u8fd9\u91cc\u7684task_resource\u662f\u88absequence_manager_impl\u901a\u8fc7SetSequencedTaskSource\u6ce8\u5165\u7684\uff0c\u6240\u4ee5task_source \u4e3aSequenceManagerImpl\u3002</p> <pre><code>absl::optional&lt;SequenceManagerImpl::SelectedTask&gt;\nSequenceManagerImpl::SelectNextTaskImpl(LazyNow&amp; lazy_now,\n                                        SelectTaskOption option) {\n  //...\n\n  // \u5f53MainThreadOnly-&gt; immediate_work_queue\u4e3a\u7a7a\u65f6\u5019\u5c1d\u8bd5\u4eceAnyThread-&gt;immediate_incoming_queue\u83b7\u53d6\u4efb\u52a1\n  ReloadEmptyWorkQueues();\n  // \u628a\u5230\u65f6\u95f4\u7684delayed_incoming_queue\u7684task\u79fb\u5230delayed_work_queue\n  MoveReadyDelayedTasksToWorkQueues(&amp;lazy_now);\n\n  // If we sampled now, check if it's time to reclaim memory next time we go\n  // idle.\n\n  // ...\n\n  while (true) {\n    // \u9009\u62e9\u4e00\u4e2aWorkQueue\n    internal::WorkQueue* work_queue =\n        main_thread_only().selector.SelectWorkQueueToService(option);\n    TRACE_EVENT_OBJECT_SNAPSHOT_WITH_ID(\n        TRACE_DISABLED_BY_DEFAULT(\"sequence_manager.debug\"), \"SequenceManager\",\n        this,\n        AsValueWithSelectorResultForTracing(work_queue,\n                                            /* force_verbose */ false));\n\n\n    if (!work_queue)\n      return absl::nullopt;\n\n    // If the head task was canceled, remove it and run the selector again.\n    if (UNLIKELY(work_queue-&gt;RemoveAllCanceledTasksFromFront()))\n      continue;\n\n    if (UNLIKELY(work_queue-&gt;GetFrontTask()-&gt;nestable ==\n                     Nestable::kNonNestable &amp;&amp;\n                 main_thread_only().nesting_depth &gt; 0)) {\n      // Defer non-nestable work. NOTE these tasks can be arbitrarily delayed so\n      // the additional delay should not be a problem.\n      // Note because we don't delete queues while nested, it's perfectly OK to\n      // store the raw pointer for |queue| here.\n      internal::TaskQueueImpl::DeferredNonNestableTask deferred_task{\n          work_queue-&gt;TakeTaskFromWorkQueue(), work_queue-&gt;task_queue(),\n          work_queue-&gt;queue_type()};\n      main_thread_only().non_nestable_task_queue.push_back(\n          std::move(deferred_task));\n      continue;\n    }\n\n    // ...\n    main_thread_only().task_execution_stack.emplace_back(\n        work_queue-&gt;TakeTaskFromWorkQueue(), work_queue-&gt;task_queue(),\n        InitializeTaskTiming(work_queue-&gt;task_queue()));\n\n    ExecutingTask&amp; executing_task =\n        *main_thread_only().task_execution_stack.rbegin();\n    NotifyWillProcessTask(&amp;executing_task, &amp;lazy_now);\n\n    // Maybe invalidate the delayed task handle. If already invalidated, then\n    // don't run this task.\n    if (!executing_task.pending_task.WillRunTask()) {\n      executing_task.pending_task.task = DoNothing();\n    }\n\n    return SelectedTask(\n        executing_task.pending_task,\n        executing_task.task_queue-&gt;task_execution_trace_logger(),\n        executing_task.priority, executing_task.task_queue_name);\n  }\n}\n</code></pre>"},{"location":"Blogs/Chromium/Chromium%27s%20MessagePump/#2task_annotator_runtask","title":"\u8fc7\u7a0b\u30102\u3011\uff1atask_annotator_.RunTask","text":"<p>\u53d6\u4efb\u52a1\u5927\u81f4\u6d41\u7a0b\u5982\u4e0a\uff0c\u63a5\u4e0b\u6765\u5206\u6790annotator\u8fd0\u884c\u4efb\u52a1\u7684\u903b\u8f91\u3002</p> <p>\u5177\u4f53\u4ee3\u7801\u53ef\u4ee5\u770b\u8fd9\u91cc\uff0c\u5c31\u662ftracing \u548c run\u3002</p>"},{"location":"Blogs/Chromium/Chromium%27s%20MessagePump/#3getpendingwakeup","title":"\u8fc7\u7a0b\u30103\u3011\uff1aGetPendingWakeUp()","text":"<p>\u6700\u540e\u518d\u6765\u5206\u6790<code>task_source-&gt;GetPendingWakeUp()</code>\uff0c\u8fd9\u91cc\u5b9e\u9645\u4e0a\u8c03\u7528\u7684\u662f<code>SequenceManagerImpl::GetPendingWakeUp()</code>.</p> <p>\u6ce8\u91ca\u5199\u7684\u6bd4\u8f83\u6e05\u6670\u4e86\uff0c\u8df3\u8f6c\u903b\u8f91\u6700\u540e\u8c03\u7528\u7684\u662f<code>main_thread_only().wake_up_queue-&gt;GetNextDelayedWakeUp()</code>\uff0c\u8df3\u8f6c\u5230\u8fd9\u91cc\uff0c\u53d6\u6700\u5c0f\u5806\u9876\u90e8\u7684WakeUp\uff0c\u83b7\u53d6\u4e0b\u6b21\u5524\u9192\u65f6\u95f4\u3002</p> <p>\u65e2\u7136\u4ece\u83b7\u53d6wake_up_queue_\u7684\u5806\u9876<code>TaskQueue</code>\u7684\u5524\u9192\u65f6\u95f4\uff0c\u90a3\u4e48\u8fd9\u4e2awake_up_queue_\u662f\u600e\u4e48\u66f4\u65b0\u7684\u5462\uff1f\u5c31\u662f\u5728\u6211\u4eec\u6bcf\u6b21\u53d6\u6d88\u606f\u7684\u65f6\u5019\uff0c\u5373\uff1a</p> <p>\u8c03\u7528\u6808\uff1a <code>SequenceManagerImpl::SelectNextTaskImpl()</code> -&gt; <code>SequenceManagerImpl::MoveReadyDelayedTasksToWorkQueues()</code> -&gt; <code>WakeUpQueue::MoveReadyDelayedTasksToWorkQueues()</code> -&gt; <code>TaskQueueImpl::MoveReadyDelayedTasksToWorkQueue()</code></p> <pre><code>void WakeUpQueue::MoveReadyDelayedTasksToWorkQueues(\n    LazyNow* lazy_now,\n    EnqueueOrder enqueue_order) {\n  bool update_needed = false;\n  while (!wake_up_queue_.empty() &amp;&amp;\n         wake_up_queue_.top().wake_up.earliest_time() &lt;= lazy_now-&gt;Now()) {\n    internal::TaskQueueImpl* queue = wake_up_queue_.top().queue;\n    // OnWakeUp() is expected to update the next wake-up for this queue with\n    // SetNextWakeUpForQueue(), thus allowing us to make progress.\n    // \u8fd9\u91cc\u5524\u9192\u961f\u5217\n    queue-&gt;OnWakeUp(lazy_now, enqueue_order);\n    update_needed = true;\n  }\n\n  if (!update_needed || wake_up_queue_.empty())\n    return;\n  // If any queue was notified, possibly update following queues. This ensures\n  // the wake up is up to date, which is necessary because calling OnWakeUp() on\n  // a throttled queue may affect state that is shared between other related\n  // throttled queues. The wake up for an affected queue might be pushed back\n  // and needs to be updated. This is done lazily only once the related queue\n  // becomes the next one to wake up, since that wake up can't be moved up.\n  // `wake_up_queue_` is non-empty here, per the condition above.\n  internal::TaskQueueImpl* queue = wake_up_queue_.top().queue;\n  queue-&gt;UpdateWakeUp(lazy_now);\n  while (!wake_up_queue_.empty()) {\n    internal::TaskQueueImpl* old_queue =\n        std::exchange(queue, wake_up_queue_.top().queue);\n    if (old_queue == queue)\n      break;\n    queue-&gt;UpdateWakeUp(lazy_now);\n  }\n}\n</code></pre> <p>\u5faa\u73af\u4e2d\u5224\u65ad\u5806\u9876\u7684\u4efb\u52a1\u961f\u5217\u662f\u5426\u5df2\u7ecf\u53ef\u4ee5\u5524\u9192\uff0c\u53ef\u6267\u884c\u7684\u8bdd\u8c03\u7528<code>TaskQueueImpl::OnWakeUp()</code>\u3002</p> <p>\u7136\u540e\u662f<code>TaskQueueImpl::MoveReadyDelayedTasksToWorkQueue()</code>\u3002</p> <p>Enqueue all delayed tasks that should be running now, skipping any that have been canceled.</p> <p>\u63a5\u7740\u5728\u6700\u540e\u8c03\u7528<code>TaskQueueImpl::UpdateWakeUp()</code>\u83b7\u53d6\u4e0b\u4e00\u6b21\u5524\u9192\u65f6\u95f4\u5e76\u5c06\u8be5\u65f6\u95f4\u8bbe\u7f6e\u4e3a\u4e0b\u4e00\u6b21\u5524\u9192\u65f6\u95f4\uff0c\u5728<code>WakeUpQueue::SetNextWakeUpForQueue()</code>\u91cc\u9762\u6d89\u53ca\u5230\u8c03\u6574\u5806\u7ed3\u6784\u3002\u5177\u4f53\uff0c\u628a\u6700\u65b0\u7684<code>WakeUp</code>\u4fe1\u606f\u6dfb\u52a0\u5230<code>wake_up_queue_</code>\u3002</p> <p>\u5728\u4ee5\u4e0a\u8fd9\u4e9b\u64cd\u4f5c\u4e4b\u540e\uff0c\u8fd9\u53ef\u80fd\u5bfc\u81f4\u961f\u5217\u4e2d\u7684\u4fe1\u606f\u53d8\u4e71\uff0c\u9700\u8981\u66f4\u65b0\uff08update_needed\uff09\u5176\u4ed6\u7684wakeup\u4fe1\u606f\u3002</p> <p>\u5982\u679c\u66f4\u65b0\u524d\u540e\u7684wake_up\u65f6\u95f4\u4e0d\u4e00\u6837\uff0c\u4f1a\u901a\u8fc7<code>DefaultWakeUpQueue::OnNextWakeUpChanged()</code>\u901a\u77e5\u89c2\u5bdf\u8005\u3002</p> <p>\u7136\u540e\u901a\u8fc7<code>SequenceManagerImpl::SetNextWakeUp()</code>\u8c03\u6574\u4efb\u52a1\u8c03\u5ea6,\u5224\u65ad\u662f\u5426\u7acb\u523b\u5524\u9192<code>ThreadControllerWithMessagePumpImpl::ScheduleWork()</code></p> <p>\u6216\u8005\u8bbe\u7f6e\u4e0b\u6b21\u5524\u9192\u65f6\u95f4<code>ThreadControllerWithMessagePumpImpl::SetNextDelayedDoWork()</code></p> <p>\u4ee5\u4e0a\u8fd9\u4e9b\u6700\u540e\u90fd\u4f1a\u63a7\u5236message_pump\u53bb\u6267\u884c\u5bf9\u5e94\u7684\u64cd\u4f5c\uff0c\u901a\u8fc7<code>MessagePumpForUI::ScheduleWork()</code>Post\u4e00\u6761windows message<code>kMsgHaveWork</code>\uff0c\u544a\u8bc9\u6709\u6d88\u606f\u6765\u4e86\u3002</p>"},{"location":"Blogs/Chromium/Chromium%27s%20MessagePump/#messagepumpforio","title":"MessagePumpForIO","text":"<p><code>MessagePumpForIO</code> \u662fwindows\u4e0bIO\u7ebf\u7a0b\u7684 message pump \u7684\u5177\u4f53\u5b9e\u4f8b\u3002</p> <p>\u4efb\u52a1\u6295\u9012\u7684\u903b\u8f91\u5c31\u653e\u5230\u4e0b\u4e00\u7bc7\u3002</p>"},{"location":"Blogs/Chromium/Chromium%27s%20SequenceManager/","title":"Sequence Manager","text":"<p><code>SequenceManager</code>\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217<code>FIFO</code>\u4f18\u5148\u961f\u5217\uff0c\u5b83\u5141\u8bb8\u4e86\u7acb\u5373\u4efb\u52a1(immediate tasks)\u5e8f\u5217\u548c\u5ef6\u65f6\u4efb\u52a1(delayed tasks)\u5e8f\u5217\u7b49\u591a\u4e2a\u5e8f\u5217\u6c47\u96c6\u5728\u5355\u4e2a\u5e95\u5c42\u5e8f\u5217\u3002</p>"},{"location":"Blogs/Chromium/Chromium%27s%20SequenceManager/#work-queue-task-selection","title":"Work Queue \u548c Task Selection","text":"<p>\u5373\u65f6\u4efb\u52a1(immediate tasks)\u548c\u5ef6\u65f6\u4efb\u52a1(delayed tasks)\u90fd\u4f1a\u88ab\u6295\u9012\u5230\u4e00\u4e2a\u4efb\u52a1\u961f\u5217(<code>TaskQueue</code>)\uff0c\u901a\u8fc7\u4e00\u4e2a\u4e0e\u4e4b\u76f8\u5173\u8054\u7684<code>TaskQueueImpl::TaskRunner</code>\u3002</p> <p><code>TaskQueue</code>\u4f7f\u7528\u72ec\u7acb\u7684\u539f\u59cbFIFO\u961f\u5217<code>WorkQueue</code>\u7ba1\u7406\u8fd9\u4e9b\u5373\u65f6\u4efb\u52a1(immediate tasks)\u548c\u5ef6\u65f6\u4efb\u52a1(delayed tasks)\u3002\u4efb\u52a1\u6700\u7ec8\u4f1a\u5230\u8fbe\u4ed6\u4eec\u6240\u6307\u5b9a\u7684<code>WorkQueue</code>\uff0c\u8fd9\u4e9b<code>WorkQueue</code>\u901a\u8fc7<code>TaskQueueSelector</code>\u5bf9\u4e8e<code>SequenceManager</code>\u6765\u8bf4\u76f4\u63a5\u53ef\u89c1\u3002</p> <p>\u5177\u4f53\u6765\u8bf4\uff0c<code>SequenceManagerImpl::SelectNextTask()</code>\u4f7f\u7528<code>TaskQueueSelector::SelectWorkQueueToService()</code>\u53bb\u9009\u62e9\u4e0b\u4e00\u4e2a\u5de5\u4f5c\u961f\u5217<code>WorkQueue</code>\uff0c\u8fd9\u5176\u4e2d\u6709\u5404\u79cd\u7b56\u7565\uff0c\u4f8b\u5982\u6839\u636e\u4f18\u5148\u7ea7\uff0c\u4ece<code>WorkQueue</code>\u4e00\u6b21\u5f39\u51fa\u4e00\u4e2a\u4efb\u52a1\u3002</p> <p>\u7406\u89e3\u4e0a\u6765\u8bf4\uff0cTaskQueue \u5305\u542b\u591a\u4e2a WorkQueue\uff08\u51c6\u786e\u7684\u8bf4\u662f4\u4e2a\uff0c3\u4e2a\u5728MainThreadOnly\uff0c1\u4e2a\u5728AnyThread\uff09\uff0cWorkQueue \u5b9e\u9645\u4e0a\u5185\u90e8\u7ef4\u62a4\u7684\u662f\u4e00\u4e2a\u961f\u5217 TaskQueueImpl::TaskDeque</p>"},{"location":"Blogs/Chromium/Chromium%27s%20SequenceManager/#journey-of-a-task","title":"Journey of a Task","text":"<p>\u4efb\u52a1\u961f\u5217(Task queues)\u6709\u4e00\u4e2a\u7279\u522b\u7684\u673a\u5236\uff0c\u53ef\u4ee5\u5141\u8bb8\u8de8\u7ebf\u7a0b\u4e14\u9ad8\u6548\u7684\u6295\u9001(posting)\u3002</p> <p>\u539f\u7406\u662f\u4f7f\u7528\u4e86\u4e24\u4e2a\u5de5\u4f5c\u961f\u5217(work queue)\uff0c\u4efb\u52a1(tasks)\u5728\u6295\u9001\u65f6\u4f7f\u7528\u7684\u662f<code>immediate_incoming_queue</code>\uff0c\u800c\u5728\u5f39\u51fa\u4efb\u52a1\u65f6\u4f7f\u7528\u7684\u662f<code>immediate_work_queue</code>\u3002</p> <p>\u4e00\u4e2a\u5373\u65f6\u4efb\u52a1(immediate tasks)\u4ece\u4e3b\u7ebf\u7a0b\u88ab\u53d1\u5e03\uff0c\u4f1a\u5728<code>TaskQueueImpl::PostImmediateTaskImpl()</code>\u91cc\u9762\u88ab\u63a8\u5230<code>immediate_incoming_queue</code>\u91cc\u3002</p> <p>\u5982\u679c\u8fd9\u4e2a\u5de5\u4f5c\u961f\u5217(work queue)\u662f\u7a7a\u7684\u5c31\u4f1a\u901a\u77e5<code>SequenceManager</code>\uff0c\u5e76\u4e14\u6ce8\u518c\u8be5<code>TaskQueue</code>\u3002\u7136\u540e<code>SequenceManger</code>\u9009\u62e9\u4e00\u4e2a\u4efb\u52a1\u4e4b\u524d\uff0c\u4f1a\u6267\u884c<code>ReloadEmptyImmediateWorkQueue()</code>\u3002\u8fd9\u4e2a\u64cd\u4f5c\u662f\u4e3a\u6240\u6709\u6ce8\u518c\u8fc7\u7684<code>TaskQueue</code>\u6279\u91cf\u5730(in batch)\u5c06\u4efb\u52a1\u4ece<code>immediate_incoming_queue</code>\u79fb\u52a8\u5230<code>immediate_work_queue</code>\u3002</p> <p>\u4e00\u4e2a\u5ef6\u65f6\u4efb\u52a1(delayed tasks)\u4ece\u4e3b\u7ebf\u7a0b\u53d1\u5e03\uff0c\u4f1a\u5728<code>TaskQueueImpl::PostImmediateTaskImpl()</code>\u91cc\u9762\u88ab\u63a8\u5230<code>delayed_incoming_queue</code>\u91cc\u9762\uff0c\u7136\u540e\u66f4\u65b0\u4e0b\u4e00\u6b21WakeUp\u3002</p> <p>\u4e00\u4e2a\u5ef6\u65f6\u4efb\u52a1(delayed tasks)\u4ece\u5176\u4ed6\u7ebf\u7a0b\u53d1\u5e03\u7684\u8bdd\uff0c\u4f1a\u6709\u4e00\u4e9b\u989d\u5916\u903b\u8f91\uff0c\u4f46\u6700\u7ec8\u4e5f\u4f1a\u88ab\u63a8\u5230<code>delayed_incoming_queue</code>\u91cc\u3002</p> <p>\u8fd9\u4e9b\u4efb\u52a1\u4e4b\u540e\u9075\u4ece\u4e0a\u9762\u5e38\u89c4\u7684\u5de5\u4f5c\u961f\u5217\u9009\u62e9\u673a\u5236(work queue selection mechanism)\u3002</p>"},{"location":"Blogs/Chromium/Chromium%27s%20SequenceManager/#journey-of-a-wakeup","title":"Journey of a WakeUp","text":"<p>\u4e00\u4e2a<code>WakeUp</code>\u4ee3\u8868\u4e86\u4e00\u4e2a\u5ef6\u8fdf\u4efb\u52a1(delayed task)\u60f3\u8981\u8fd0\u884c\u7684\u65f6\u95f4\u3002</p> <p>\u6bcf\u4e2a<code>TaskQueueImpl</code>\u90fd\u6709\u5c5e\u4e8e\u7684\u5404\u81ea\u7684\u4e0b\u4e00\u6b21\u5524\u9192\u65f6\u95f4\uff0c\u4fdd\u5b58\u5728<code>main_thread_only().scheduled_wake_up</code>\uff0c\u5e76\u4e14\u4e0e\u6700\u65e9\u7684\u5f85\u5904\u7406\u5ef6\u65f6\u4efb\u52a1(the earliest pending delayed task)\u76f8\u5173\u8054\u3002</p> <p>\u5b83\u901a\u8fc7<code>WakeUpQueue::SetNextWakeUpForQueue()</code>\u5c06\u5b83\u7684\u4e0b\u6b21\u5524\u9192\u4fe1\u606f\u4f20\u9012\u7ed9<code>WakeUpQueue</code>\u3002\u8fd9\u4e2a<code>WakeUpQueue</code>\u8d1f\u8d23\u786e\u5b9a\u7ebf\u7a0b\u4e0b\u4e00\u6b21\u7684\u5524\u9192\u65f6\u95f4\uff0c\u5e76\u4e14\u662f\u901a\u8fc7<code>SequenceManagerImpl</code>\u8bbf\u95ee\u3002\u5047\u5982\u5f53\u524d\u6ca1\u6709\u7acb\u5373\u5de5\u4f5c(immediate work)\uff0c\u5219\u53ef\u4ee5\u51b3\u5b9a\u4e0b\u4e00\u4e2a\u8fd0\u884c\u65f6\u95f4\uff0c\u5e76\u6700\u7ec8\u4f20\u9012\u7ed9<code>MessagePump</code>\u3002</p> <p>\u901a\u5e38\u662f\u901a\u8fc7<code>MessagePump::Delegate::NextWorkInfo</code>\uff08\u7531<code>ThreadControllerWithMessagePumpImpl::DoWork()</code>\u8fd4\u56de\uff09\u6216\u901a\u8fc7<code>MessagePump::ScheduleDelayedWork()</code>\uff08\u5728\u6781\u5c11\u6570\u60c5\u51b5\u4e0b\uff0c\u4e0b\u4e00\u6b21\u5524\u9192\u662f\u5728<code>DoWork()</code>\u4ee5\u5916\u7684\u4e3b\u7ebf\u7a0b\u4e0a\u5b89\u6392\u7684\uff09\u3002</p> <p>\u5f53\u5230\u8fbe\u4e0e\u5524\u9192\u76f8\u5173\u8054\u7684\u5ef6\u8fdf\u8fd0\u884c\u65f6\u95f4\u65f6\uff0c<code>WakeUpQueue</code>\u4f1a\u901a\u8fc7<code>WakeUpQueue::MoveReadyDelayedTasksToWorkQueues()</code>\u65b9\u5f0f\u88ab\u901a\u77e5\uff0c\u7136\u540e\u53cd\u8fc7\u6765\u901a\u77e5\u6240\u6709\u80fd\u591f\u89e3\u51b3\u8fd9\u6b21\u5524\u9192(wake-up)\u95ee\u9898\u7684\u4efb\u52a1\u961f\u5217(<code>TaskQueue</code>)\u3002</p> <p>\u8fd9\u6837\uff0c\u6bcf\u4e2a\u4efb\u52a1\u961f\u5217\u90fd\u80fd\u5904\u7406\u5230\u671f\u7684\u5ef6\u65f6\u4efb\u52a1\u3002</p>"},{"location":"Blogs/Chromium/Chromium%27s%20SequenceManager/#journey-of-a-delayed-task","title":"Journey of a delayed Task","text":"<p>\u8de8\u7ebf\u7a0b\u53d1\u5e03\u7684\u5ef6\u65f6\u4efb\u52a1\u4f1a\u751f\u6210\u4e00\u4e2a\u5373\u65f6\u4efb\u52a1\uff0c\u4ee5\u8fd0\u884c<code>TaskQueueImpl::ScheduleDelayedWorkTask()</code>\u5e76\u4e14\u6700\u7ec8\u8c03\u7528<code>TaskQueueImpl::PushOntoDelayedIncomingQueueFromMainThread()</code>\uff0c\u5982\u6b64\u4fbf\u53ef\u4ee5\u5728\u4e3b\u7ebf\u7a0b\u4e0a\u628a\u5373\u65f6\u4efb\u52a1\u52a0\u5165\u961f\u5217\u3002</p> <p>\u4ece\u4e3b\u7ebf\u7a0b\u53d1\u5e03\u7684\u5ef6\u8fdf\u4efb\u52a1\u4f1a\u8df3\u8fc7\u8fd9\u4e00\u6b65\uff0c\u76f4\u63a5\u8c03\u7528<code>TaskQueueImpl::PushOntoDelayedIncomingQueueFromMainThread()</code>\u3002\u7136\u540e\uff0c\u4efb\u52a1\u4f1a\u88ab\u63a8\u9001\u5230<code>main_thread_only().delayed_incoming_queue</code>\uff0c\u5e76\u53ef\u80fd\u66f4\u65b0\u4e0b\u4e00\u6b21\u4efb\u52a1\u961f\u5217\u7684\u5524\u9192(wake-up)\u3002</p> <p>\u4e00\u65e6\u5230\u8fbe\u5ef6\u8fdf\u8fd0\u884c\u65f6\u95f4\uff0c\u53ef\u80fd\u56e0\u4e3a\u5524\u9192\u5df2\u7ecf\u88ab\u89e3\u51b3\uff0c\u5ef6\u8fdf\u7684\u4efb\u52a1\u4f1a\u88ab\u79fb\u52a8\u5230<code>main_thread_only().delayed_work_queue</code>\uff0c\u5e76\u9075\u5faa\u5e38\u89c4\u7684\u5de5\u4f5c\u961f\u5217\u9009\u62e9\u673a\u5236\u3002</p>"},{"location":"Blogs/Chromium/Chromium%27s%20TaskPosting/","title":"Chromium's Task Posting","text":"<p>\u4e3a\u4e86\u5c06\u4efb\u52a1\u6295\u9012\u5230\u4e3b\u7ebf\u7a0b\uff08UI\uff09\u7ebf\u7a0b\u6216\u8005 IO \u7ebf\u7a0b\uff0c\u4f7f\u7528<code>content::GetUIThreadTaskTunner({})</code> \u6216\u8005<code>content::GetIOThreadTaskRunner({})</code>\u3002\u4f60\u4e5f\u53ef\u4ee5\u63d0\u4f9b\u989d\u5916\u7684<code>BrowserTaskTraits</code>\u4f5c\u4e3a\u53c2\u6570\uff08\u8fd9\u5e76\u4e0d\u5e38\u89c1\u5e76\u4e14\u901a\u5e38\u6709\u7279\u6b8a\u542b\u4e49\uff09</p> <p>\u6211\u4eec\u4ee5\u901a\u5e38\u7528\u6cd5<code>content::GetUIThreadTaskRunner({})-&gt;PostTask(FROM_HERE, ...)</code>\u4e3a\u4f8b\u3002</p> <p>\u641c\u7d22\u4e00\u4e0b\u6e90\u7801\uff0c\u6700\u540e\u8c03\u7528\u7684\u90fd\u662f\uff1a</p> <pre><code>// static\nscoped_refptr&lt;base::SingleThreadTaskRunner&gt;\nBrowserTaskExecutor::GetUIThreadTaskRunner(const BrowserTaskTraits&amp; traits) {\n  return Get()-&gt;GetTaskRunner(BrowserThread::UI, traits);\n}\n</code></pre> <p><code>GetTaskRunner()</code>\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a</p> <pre><code>scoped_refptr&lt;base::SingleThreadTaskRunner&gt;\nBaseBrowserTaskExecutor::GetTaskRunner(BrowserThread::ID identifier,\n                                       const BrowserTaskTraits&amp; traits) const {\n  const QueueType queue_type = GetQueueType(traits);\n\n  switch (identifier) {\n    case BrowserThread::UI: {\n      return browser_ui_thread_handle_-&gt;GetBrowserTaskRunner(queue_type);\n    }\n    case BrowserThread::IO:\n      return browser_io_thread_handle_-&gt;GetBrowserTaskRunner(queue_type);\n    case BrowserThread::ID_COUNT:\n      NOTREACHED();\n  }\n  return nullptr;\n}\n</code></pre> <p>\u8fd9\u4e2a<code>browser_ui_thread_handle_</code>\u662f\u5728<code>BrowserTaskExecutor::Create()</code>\u7684\u65f6\u5019\u6784\u9020\u51fa\u6765\u7684\uff0c\u5177\u4f53\u5c31\u662f<code>Create() -&gt; CreateInternal() -&gt; BrowserTaskExecutor()</code></p> <p>\u901a\u8fc7</p> <pre><code>BrowserTaskExecutor::BrowserTaskExecutor(\n    // 1\n    std::unique_ptr&lt;BrowserUIThreadScheduler&gt; browser_ui_thread_scheduler,\n    std::unique_ptr&lt;BrowserIOThreadDelegate&gt; browser_io_thread_delegate)\n    // 2\n    : ui_thread_executor_(std::make_unique&lt;UIThreadExecutor&gt;(\n          std::move(browser_ui_thread_scheduler))),\n      io_thread_executor_(std::make_unique&lt;IOThreadExecutor&gt;(\n          std::move(browser_io_thread_delegate))) {\n  // 3\n  browser_ui_thread_handle_ = ui_thread_executor_-&gt;GetUIThreadHandle();\n  browser_io_thread_handle_ = io_thread_executor_-&gt;GetIOThreadHandle();\n  ui_thread_executor_-&gt;SetIOThreadHandle(browser_io_thread_handle_);\n  io_thread_executor_-&gt;SetUIThreadHandle(browser_ui_thread_handle_);\n}\n</code></pre> <p>\u5177\u4f53\u5206\u6790\u4e00\u4e0b\u30101\u3011\uff0c<code>BrowserUIThreadScheduler</code>:</p> <pre><code>BrowserUIThreadScheduler::BrowserUIThreadScheduler()\n    : owned_sequence_manager_(\n          // a\n          base::sequence_manager::CreateUnboundSequenceManager(\n              base::sequence_manager::SequenceManager::Settings::Builder()\n                  .SetMessagePumpType(base::MessagePumpType::UI)\n                  .SetCanRunTasksByBatches(true)\n                  .SetPrioritySettings(\n                      internal::CreateBrowserTaskPrioritySettings())\n                  .Build())),\n      // b\n      task_queues_(BrowserThread::UI, owned_sequence_manager_.get()),\n      queue_enabled_voters_(task_queues_.CreateQueueEnabledVoters()),\n      handle_(task_queues_.GetHandle()) {\n  CommonSequenceManagerSetup(owned_sequence_manager_.get());\n  owned_sequence_manager_-&gt;SetDefaultTaskRunner(\n      handle_-&gt;GetDefaultTaskRunner());\n\n  owned_sequence_manager_-&gt;BindToMessagePump(\n      base::MessagePump::Create(base::MessagePumpType::UI));\n  g_browser_ui_thread_scheduler = this;\n}\n</code></pre> <p>\u3010a\u3011\u5904<code>CreateUnboundSequenceManager()</code>\u6700\u540e\u8c03\u7528\u7684\u662f</p> <pre><code>// static\nstd::unique_ptr&lt;SequenceManagerImpl&gt; SequenceManagerImpl::CreateUnbound(\n    SequenceManager::Settings settings) {\n  // \u521d\u59cb\u5316thread_controller\n  auto thread_controller =\n      ThreadControllerWithMessagePumpImpl::CreateUnbound(settings);\n  return WrapUnique(new SequenceManagerImpl(std::move(thread_controller),\n                                            std::move(settings)));\n}\n</code></pre> <p>\u8fd9\u91cc\u6211\u4eec\u770b\u5230\u4e4b\u524d\u5206\u6790\u83b7\u53d6\u4efb\u52a1\u548c\u6267\u884c\u4efb\u52a1\u6240\u719f\u6089\u7684<code>ThreadControllerWithMessagePumpImpl</code>\uff0c\u5728<code>SequenceManagerImpl</code>\u7684\u6784\u9020\u51fd\u6570\u4e2d\u4f1a\u5c06<code>controller_</code>\u7684<code>SequencedTaskSource</code>\u8bbe\u4e3a<code>this</code>\uff0c\u7ecf\u5178\u7684\u4f9d\u8d56\u6ce8\u5165\uff0c\u540c\u65f6\u8fd9\u4e5f\u7b26\u5408\u6211\u4eec\u4e0a\u9762\u83b7\u53d6task\u7684\u5206\u6790\u3002</p> <p>\u3010b\u3011\u5904\u7684<code>task_queues_</code>\u7684\u521b\u5efa</p> <p><code>task_queues_</code>\u7684\u7c7b\u578b\u662f<code>BrowserTaskQueues</code>\uff0c\u6784\u9020\u4ee3\u7801\u6bd4\u8f83\u957f\uff0c\u5177\u4f53\u770b\u8fd9\u91cc\u3002</p> <pre><code>BrowserTaskQueues::BrowserTaskQueues(\n    BrowserThread::ID thread_id,\n    base::sequence_manager::SequenceManager* sequence_manager) {\n  for (size_t i = 0; i &lt; queue_data_.size(); ++i) {\n    // \u521b\u5efaTaskQueue\n    queue_data_[i].task_queue = sequence_manager-&gt;CreateTaskQueue(\n        base::sequence_manager::TaskQueue::Spec(\n            GetTaskQueueName(thread_id, static_cast&lt;QueueType&gt;(i))));\n    queue_data_[i].voter = queue_data_[i].task_queue-&gt;CreateQueueEnabledVoter();\n    if (static_cast&lt;QueueType&gt;(i) != QueueType::kDefault) {\n      queue_data_[i].voter-&gt;SetVoteToEnable(false);\n    }\n  }\n\n  // \u8bbe\u7f6e\u4f18\u5148\u7ea7\n  GetBrowserTaskQueue(QueueType::kUserVisible)\n      -&gt;SetQueuePriority(BrowserTaskPriority::kLowPriority);\n\n  // ...\n\n  // Control queue\n  control_queue_ =\n      sequence_manager-&gt;CreateTaskQueue(base::sequence_manager::TaskQueue::Spec(\n          GetControlTaskQueueName(thread_id)));\n  control_queue_-&gt;SetQueuePriority(BrowserTaskPriority::kControlPriority);\n\n  // Run all pending queue\n  run_all_pending_tasks_queue_ =\n      sequence_manager-&gt;CreateTaskQueue(base::sequence_manager::TaskQueue::Spec(\n          GetRunAllPendingTaskQueueName(thread_id)));\n  run_all_pending_tasks_queue_-&gt;SetQueuePriority(\n      BrowserTaskPriority::kBestEffortPriority);\n\n  handle_ = base::AdoptRef(new Handle(this));\n}\n</code></pre> <p><code>BrowserTaskQueues</code>\u6784\u9020\u65f6\u5019\u4f1a\u8c03\u7528\u4e0a\u9762\u5728\u3010a\u3011\u7684<code>SequenceManager</code>\u91cc\u521b\u5efa\u591a\u4e2a<code>Queue</code>\uff0c\u5e76\u4e3a\u6bcf\u4e2a<code>Queue</code>\u8bbe\u7f6e\u4e0d\u540c\u4f18\u5148\u7ea7\uff0c\u6700\u540e\u521b\u5efa\u4e86\u4e00\u4e2a\u81ea\u5df1\u7684<code>Handle</code>\u5bf9\u8c61\u3002</p> <p>\u9996\u5148\u770bTaskQueue\u7684\u521b\u5efa\uff0c<code>SequenceManager-&gt;CreateTaskQueue()</code>\uff0c\u6700\u7ec8\u4f1a\u8c03\u7528\u5230\u8fd9\u91cc:</p> <pre><code>std::unique_ptr&lt;internal::TaskQueueImpl&gt;\nSequenceManagerImpl::CreateTaskQueueImpl(const TaskQueue::Spec&amp; spec) {\n  DCHECK_CALLED_ON_VALID_THREAD(associated_thread_-&gt;thread_checker);\n  std::unique_ptr&lt;internal::TaskQueueImpl&gt; task_queue =\n      std::make_unique&lt;internal::TaskQueueImpl&gt;(\n          this,\n          spec.non_waking ? main_thread_only().non_waking_wake_up_queue.get()\n                          : main_thread_only().wake_up_queue.get(),\n          spec);\n  main_thread_only().active_queues.insert(task_queue.get());\n  main_thread_only().selector.AddQueue(\n      task_queue.get(), settings().priority_settings.default_priority());\n  return task_queue;\n}\n</code></pre> <p>\u7136\u540e<code>TaskQueueImpl</code>:</p> <pre><code>TaskQueueImpl::TaskQueueImpl(SequenceManagerImpl* sequence_manager,\n                             WakeUpQueue* wake_up_queue,\n                             const TaskQueue::Spec&amp; spec)\n    : name_(spec.name),\n      sequence_manager_(sequence_manager),\n      associated_thread_(sequence_manager\n                             ? sequence_manager-&gt;associated_thread()\n                             : AssociatedThreadId::CreateBound()),\n      task_poster_(MakeRefCounted&lt;GuardedTaskPoster&gt;(this)),\n      main_thread_only_(this, wake_up_queue),\n      empty_queues_to_reload_handle_(\n          sequence_manager\n              ? sequence_manager-&gt;GetFlagToRequestReloadForEmptyQueue(this)\n              : AtomicFlagSet::AtomicFlag()),\n      should_monitor_quiescence_(spec.should_monitor_quiescence),\n      should_notify_observers_(spec.should_notify_observers),\n      delayed_fence_allowed_(spec.delayed_fence_allowed),\n      // \u521b\u5efa Default TaskRunner\n      default_task_runner_(CreateTaskRunner(kTaskTypeNone)) {\n  UpdateCrossThreadQueueStateLocked();\n  // SequenceManager can't be set later, so we need to prevent task runners\n  // from posting any tasks.\n  if (sequence_manager_)\n    task_poster_-&gt;StartAcceptingOperations();\n}\n</code></pre> <p>\u5728<code>TaskQueueImpl()</code>\u91cc\u521b\u5efa\u4e86\u5bf9\u5e94\u7684<code>TaskRunner</code>\uff0c<code>TaskQueueImpl()</code>\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f<code>WakeUpQueue</code>\uff0c\u8d1f\u8d23\u7ba1\u7406\uff08\u5524\u9192\u76f8\u5173\uff09\u8be5<code>TaskQueueImpl</code>\u3002</p> <p>\u521d\u59cb\u5316\u5b8c\u6bd5\u540e\uff0c<code>return task_queue</code> \u8fd4\u56de\u5230\u4e0a\u4e00\u5c42\uff1a</p> <pre><code>TaskQueue::Handle SequenceManagerImpl::CreateTaskQueue(\n    const TaskQueue::Spec&amp; spec) {\n  return TaskQueue::Handle(CreateTaskQueueImpl(spec));\n}\n</code></pre> <p>\u8fd9\u91cc\uff0c\u4ee3\u7801\u53d1\u751f\u8fc7\u4e00\u4e9b\u53d8\u52a8:</p> <p>[scheduler] Introduce TaskQueue::Handle which owns TaskQueue</p> <p>\u6700\u65b0\u7684chromium\u5f15\u8fdb\u4e86<code>SequenceManager::Handle</code>\u6765\u7ba1\u7406<code>TaskQueue</code>\u3002</p> <p><code>SequenceManager::Handle</code>\u5185\u90e8\u6301\u6709<code>TaskQueueImpl</code>\u548c\u4e00\u4e2a<code>sequence_manager</code>\u7684\u5f15\u7528\u3002</p> <p>\u5728\u6ca1\u6709\u8fd9\u4e2a<code>Handle</code>\u4e4b\u524d\uff0c<code>TaskRunner</code>\u662f\u5728\u8fd9\u91cc\u521b\u5efa\u7684\uff08\u901a\u8fc7SequenceManagerImpl-&gt;CreateTaskRunner()\u7b49\u7b49...\uff09\u3002</p> <p>\uff08\u8fd9\u4e00\u7cfb\u5217\u90fd\u662f\u4f9d\u8d56\u6ce8\u5165\uff0c\u4e00\u5c42\u4e00\u5c42\u7684\uff09</p> <p>\u4efb\u52a1\u961f\u5217\u521b\u5efa\u5b8c\u6bd5\u540e\uff0c<code>BrowserTaskQueues()</code>\u6700\u540e\u628a\u4ed6\u653e\u5230handle\u91cc\u9762\uff1a</p> <pre><code>handle_ = base::AdoptRef(new Handle(this));\n</code></pre> <p>\u8fd9\u4e2a handle \u7c7b\u578b\u662f<code>BrowserTaskQueues::Handle</code>:</p> <pre><code>BrowserTaskQueues::Handle::Handle(BrowserTaskQueues* outer)\n    : outer_(outer),\n      control_task_runner_(outer_-&gt;control_queue_-&gt;task_runner()),\n      default_task_runner_(outer_-&gt;GetDefaultTaskQueue()-&gt;task_runner()),\n      browser_task_runners_(outer_-&gt;CreateBrowserTaskRunners()) {}\n</code></pre> <p>\u521d\u59cb\u5316\u4e86\u4e09\u4e2a<code>TaskRunner</code>\uff0c\u5206\u522b\u4ece\u4e09\u4e2a\u4e0d\u540c\u7684<code>TaskQueue</code>\u83b7\u53d6\u3002<code>CreateBrowserTaskRunner</code>\u4f1a\u521d\u59cb\u5316\u5e76\u83b7\u53d6\u4e0a\u9762\u901a\u8fc7<code>SeqenceManager::CreateTaskQueue()</code>\u521b\u5efa\u7684<code>TaskQueue</code>\u7684\u91cc\u7684<code>TaskRunner</code>:</p> <pre><code>std::array&lt;scoped_refptr&lt;base::SingleThreadTaskRunner&gt;,\n           BrowserTaskQueues::kNumQueueTypes&gt;\nBrowserTaskQueues::CreateBrowserTaskRunners() const {\n  std::array&lt;scoped_refptr&lt;base::SingleThreadTaskRunner&gt;, kNumQueueTypes&gt;\n      task_runners;\n  for (size_t i = 0; i &lt; queue_data_.size(); ++i) {\n    // \u8fd9\u91cctask\n    task_runners[i] = queue_data_[i].task_queue-&gt;task_runner();\n  }\n  return task_runners;\n}\n</code></pre> <p>\u8fd9\u91cc<code>task_queue-&gt;task_runner()</code>\u7684\u7ed3\u679c\u662f\uff1a</p> <pre><code>const scoped_refptr&lt;SingleThreadTaskRunner&gt;&amp; TaskQueueImpl::task_runner() const {\n  return default_task_runner_;\n}\n</code></pre> <p>\u8fd9\u4e2a<code>default_task_runner_</code>\u5c31\u662f\u524d\u9762<code>TaskQueueImpl::TaskQueueImpl()</code>\u91cc\u901a\u8fc7<code>TaskQueueImpl::CreateTaskRunner(kTaskTypeNone)</code>\u521d\u59cb\u5316\u7684\u3002</p> <p>\u6240\u4ee5\u770b\u6765\uff0c\u8fd9\u4e2ahandle\u987a\u5e26\u5e2e<code>BrowserTaskQueues</code>\u7ed1\u5b9a\u4e86\u4e00\u4e0b\u5bf9\u5e94\u7684<code>task_runner</code>\uff0c\u4ee5\u4fbf\u5916\u90e8\u901a\u8fc7\u8c03\u7528<code>BrowserTaskQueues::GetBrowserTaskRunner(QueueType)</code>\u6765\u6839\u636e\u4e0d\u540c\u7684<code>QueueType</code>\u9009\u62e9\u5bf9\u5e94\u7684<code>TaskRunner</code>\uff1a</p> <pre><code>const scoped_refptr&lt;base::SingleThreadTaskRunner&gt;&amp; GetBrowserTaskRunner(\n        QueueType queue_type) const {\n      return browser_task_runners_[static_cast&lt;size_t&gt;(queue_type)];\n    }\n</code></pre> <p>\u4ee5\u4e0a\u662f\u4efb\u52a1\u6295\u9012\u7684\u524d\u60c5\u63d0\u8981\uff0c\u6b63\u7247\u5f00\u59cb\uff0c\u6765\u770b\u6295\u9012\u7684\u5177\u4f53\u903b\u8f91\u3002</p> <p>\u641c\u7d22\u4e00\u4e0b\u76f8\u5173\u7528\u6cd5\uff0c\u5927\u90e8\u5206\u90fd\u662f\uff1a<code>content::GetUIThreadTaskRunner({})-&gt;PostTask(FROM_HERE, ...)</code></p> <p>\u8c03\u7528\u903b\u8f91\u662f<code>TaskQueueImpl::TaskRunner::PostTask()</code> -&gt; <code>TaskRunner::PostDelayedTask()</code> -&gt; <code>TaskQueueImpl::TaskRunner::PostDelayedTask()</code></p> <pre><code>bool TaskQueueImpl::TaskRunner::PostDelayedTask(const Location&amp; location,\n                                                OnceClosure callback,\n                                                TimeDelta delay) {\n  return task_poster_-&gt;PostTask(PostedTask(this, std::move(callback), location,\n                                           delay, Nestable::kNestable,\n                                           task_type_));\n}\n</code></pre> <p><code>task_poster_</code>\u662f\u4e00\u4e2a<code>TaskQueueImpl::GuardTaskPoster</code>\u3002</p> <pre><code>bool TaskQueueImpl::GuardedTaskPoster::PostTask(PostedTask task) {\n  // Do not process new PostTasks while we are handling a PostTask (tracing\n  // has to do this) as it can lead to a deadlock and defer it instead.\n  ScopedDeferTaskPosting disallow_task_posting;\n\n  auto token = operations_controller_.TryBeginOperation();\n  if (!token)\n    return false;\n\n  outer_-&gt;PostTask(std::move(task));\n  return true;\n}\n</code></pre> <p>\u4e3b\u8981\u662f\u5bf9PostTask\u7684\u524d\u540e\u505a\u4e00\u4e9b\u72b6\u6001\u68c0\u6d4b\uff0c\u6700\u540e\u628atask\u8fd8\u7ed9\u7ed9outer_\uff0c\u4e5f\u5c31\u662f\u5916\u9762\u7684<code>TaskQueueImpl::PostTask()</code>\u5904\u7406</p> <pre><code>void TaskQueueImpl::PostTask(PostedTask task) {\n  CurrentThread current_thread =\n      associated_thread_-&gt;IsBoundToCurrentThread()\n          ? TaskQueueImpl::CurrentThread::kMainThread\n          : TaskQueueImpl::CurrentThread::kNotMainThread;\n\n// some checks...\n\n  if (!task.is_delayed()) {\n    PostImmediateTaskImpl(std::move(task), current_thread);\n  } else {\n    PostDelayedTaskImpl(std::move(task), current_thread);\n  }\n}\n</code></pre> <p>\u83b7\u53d6\u5f53\u524d\u76f8\u5173\u7ebf\u7a0b\uff0c\u5224\u65ad\u4efb\u52a1\u662f\u5426\u5ef6\u65f6\uff0c\u7136\u540e\u63a8\u9001\u5230\u5bf9\u5e94\u961f\u5217\u3002</p> <p>\u9996\u5148\u6765\u770b\u6dfb\u52a0\u5ef6\u8fdf\u4efb\u52a1\uff0c\u8fd9\u4e2a\u6bd4\u8f83\u7b80\u77ed\u3002</p> <pre><code>void TaskQueueImpl::PostDelayedTaskImpl(PostedTask posted_task,\n                                        CurrentThread current_thread) {\n  // Use CHECK instead of DCHECK to crash earlier. See http://crbug.com/711167\n  // for details.\n  if (current_thread == CurrentThread::kMainThread) {\n    // ...\n    PushOntoDelayedIncomingQueueFromMainThread(\n        std::move(pending_task), &amp;lazy_now,\n        /* notify_task_annotator */ true);\n  } else {\n    // ...\n    PushOntoDelayedIncomingQueue(\n        MakeDelayedTask(std::move(posted_task), &amp;lazy_now));\n  }\n}\n</code></pre> <p>\u5982\u679c\u5f53\u524d\u7ebf\u7a0b\u662f\u4e3b\u7ebf\u7a0b\uff0c\u76f4\u63a5\u585e\u5230<code>delayed_incoming_queue</code>\u91cc\uff1a</p> <pre><code>void TaskQueueImpl::PushOntoDelayedIncomingQueueFromMainThread(\n    Task pending_task,\n    LazyNow* lazy_now,\n    bool notify_task_annotator) {\n\n  // \u4e00\u4e9b tracing\n  if (notify_task_annotator) {\n    sequence_manager_-&gt;WillQueueTask(&amp;pending_task);\n    MaybeReportIpcTaskQueuedFromMainThread(pending_task);\n  }\n  // \u585e\u5165\u961f\u5217\n  main_thread_only().delayed_incoming_queue.push(std::move(pending_task));\n  // \u8bbe\u7f6e\u4e0b\u6b21\u5524\u9192\u65f6\u95f4\n  UpdateWakeUp(lazy_now);\n\n  TraceQueueSize();\n}\n</code></pre> <p>\u5982\u679c\u5f53\u524d\u662f\u5176\u4ed6\u7ebf\u7a0b\uff1a</p> <pre><code>void TaskQueueImpl::PushOntoDelayedIncomingQueue(Task pending_task) {\n  sequence_manager_-&gt;WillQueueTask(&amp;pending_task);\n  MaybeReportIpcTaskQueuedFromAnyThreadUnlocked(pending_task);\n\n  // TODO(altimin): Add a copy method to Task to capture metadata here.\n  auto task_runner = pending_task.task_runner;\n  const auto task_type = pending_task.task_type;\n  PostImmediateTaskImpl(\n      PostedTask(std::move(task_runner),\n                 BindOnce(&amp;TaskQueueImpl::ScheduleDelayedWorkTask,\n                          Unretained(this), std::move(pending_task)),\n                 FROM_HERE, TimeDelta(), Nestable::kNonNestable, task_type),\n      CurrentThread::kNotMainThread);\n}\n</code></pre> <p>\u8c03\u7528<code>PostImmediateTaskImpl</code>\u6dfb\u52a0\u4e00\u4e2a\u7acb\u5373\u6267\u884c\u4efb\u52a1\u3002</p> <p>\u9996\u5148\u770b\u8be5\u4efb\u52a1\u56de\u8c03<code>TaskQueueImpl::ScheduleDelayedWorkTask()</code>\u3002</p> <p>\u5728<code>TaskQueueImpl::ScheduleDelayedWorkTask()</code>\u4e2d\uff0c\u53ef\u4ee5\u770b\u5230\uff1a</p> <p>If |delayed_run_time| is in the past then push it onto the work queue immediately. To ensure the right task ordering we need to temporarily push it onto the |delayed_incoming_queue|.</p> <p>\u548c</p> <p>If |delayed_run_time| is in the future we can queue it as normal.</p> <p>\u610f\u5473\u7740\uff0c\u6700\u7ec8\u4e5f\u662f\u5728\u76ee\u6807\u7ebf\u7a0b\u63a8\u5165\u4e86<code>delayed_incoming_queue</code>\u3002</p> <p>\u518d\u6765\u770b<code>PostImmediateTaskImpl</code>\uff1a</p> <pre><code>void TaskQueueImpl::PostImmediateTaskImpl(PostedTask task,\n                                          CurrentThread current_thread) {\n  // checks...\n\n  bool should_schedule_work = false;\n  {\n    // TODO(alexclarke): Maybe add a main thread only immediate_incoming_queue\n    // See https://crbug.com/901800\n\n    // \u4f7f\u7528anythread\u9700\u8981\u52a0\u9501\n    base::internal::CheckedAutoLock lock(any_thread_lock_);\n    bool add_queue_time_to_tasks = sequence_manager_-&gt;GetAddQueueTimeToTasks();\n    TimeTicks queue_time;\n    if (add_queue_time_to_tasks || delayed_fence_allowed_)\n      queue_time = sequence_manager_-&gt;any_thread_clock()-&gt;NowTicks();\n\n    // The sequence number must be incremented atomically with pushing onto the\n    // incoming queue. Otherwise if there are several threads posting task we\n    // risk breaking the assumption that sequence numbers increase monotonically\n    // within a queue.\n    EnqueueOrder sequence_number = sequence_manager_-&gt;GetNextSequenceNumber();\n    bool was_immediate_incoming_queue_empty =\n        any_thread_.immediate_incoming_queue.empty();\n\n    // \u5e8f\u53f7\u5728\u63a8\u5165\u524d\u5c31\u8981\u6307\u5b9a\uff0c\u4e0d\u7136\u5e76\u53d1\u65f6\u5019\u4f1a\u4e71\uff08\u540e\u6765\u7684\u6709\u53ef\u80fd\u5728\u524d\u9762\uff09\n    // 1\n    any_thread_.immediate_incoming_queue.push_back(\n        Task(std::move(task), sequence_number, sequence_number, queue_time));\n\n    // \u4e00\u4e9btracing\uff0cback\u5c31\u662f\u6211\u4eec\u521a\u653e\u8fdb\u53bb\u7684task\n    sequence_manager_-&gt;WillQueueTask(\n        &amp;any_thread_.immediate_incoming_queue.back());\n    MaybeReportIpcTaskQueuedFromAnyThreadLocked(\n        any_thread_.immediate_incoming_queue.back());\n\n    for (auto&amp; handler : any_thread_.on_task_posted_handlers) {\n      DCHECK(!handler.second.is_null());\n      handler.second.Run(any_thread_.immediate_incoming_queue.back());\n    }\n\n    // If this queue was completely empty, then the SequenceManager needs to be\n    // informed so it can reload the work queue and add us to the\n    // TaskQueueSelector which can only be done from the main thread. In\n    // addition it may need to schedule a DoWork if this queue isn't blocked.\n    if (was_immediate_incoming_queue_empty &amp;&amp;\n        any_thread_.immediate_work_queue_empty) {\n      empty_queues_to_reload_handle_.SetActive(true);\n      should_schedule_work =\n          any_thread_.post_immediate_task_should_schedule_work;\n    }\n  }\n\n  // On windows it's important to call this outside of a lock because calling a\n  // pump while holding a lock can result in priority inversions. See\n  // http://shortn/_ntnKNqjDQT for a discussion.\n  //\n  // Calling ScheduleWork outside the lock should be safe, only the main thread\n  // can mutate |any_thread_.post_immediate_task_should_schedule_work|. If it\n  // transitions to false we call ScheduleWork redundantly that's harmless. If\n  // it transitions to true, the side effect of\n  // |empty_queues_to_reload_handle_SetActive(true)| is guaranteed to be picked\n  // up by the ThreadController's call to SequenceManagerImpl::DelayTillNextTask\n  // when it computes what continuation (if any) is needed.\n  if (should_schedule_work)\n    sequence_manager_-&gt;ScheduleWork();\n\n  TraceQueueSize();\n}\n</code></pre> <p>\u30101\u3011\u5904\u6700\u540e\u4e5f\u662f\u628a\u4efb\u52a1\u63a8\u5230\u5230immediate_incoming_queue\u3002</p>"},{"location":"Blogs/Network/ip_datagram/","title":"Ip datagram","text":""},{"location":"Blogs/Network/ip_datagram/#0x00-about","title":"0x00 About","text":"<p>IP lays on the third layer of ISO model, which is <code>network layer</code></p> <p>IP address is consist of four one-byte unsigned number, an IP address is a 32-bit number subdivided into four bytes</p> <p>IP address ::= {\\, \\} <p>CIDR presentation</p> <p>IP address ::= {\\, \\} (also with slash notation) <p>ex: 128.14.35.7/20</p>"},{"location":"Blogs/Network/ip_datagram/#0x01-datagram-conposition","title":"0x01 Datagram Conposition","text":""},{"location":"Blogs/Network/ip_datagram/#header-part","title":"header part","text":"<p>Fixed header of <code>20 bytes</code>, Flexable of <code>40 bytes</code>, which means [20 - 60] bytes range header.</p> <p>Contains <code>source-addr</code> and <code>destination-addr</code></p>"},{"location":"Blogs/Network/ip_datagram/#data-part","title":"data part","text":"<p>The MTU(maximum Transfer unit), which means max data section length in mac, is about to be 1500 bytes. So if datagram length exceeded the MTU value size, we need to get datagram fragmented.</p>"},{"location":"Blogs/Network/ip_datagram/#0x02","title":"0x02","text":"<p>ip</p>"},{"location":"Blogs/Network/tcp/","title":"TCP","text":""},{"location":"Blogs/Network/tcp/#brief","title":"Brief","text":"<p>TCP is a/the reliable byte stream protocol for internet</p> <p>How to be reliable and sequence-preserving?</p> <ul> <li>Assign every byte in the stream a sequence number</li> <li>Cumulative positive acknowledge(I've receied all bytes up to seqno.X)</li> <li>Retransmit when didn't get ACK in time</li> </ul> <p>TCP is connection-oriented</p> <p>TCP state transition diagram : pic here All about is</p> <ul> <li>Establish a connection</li> <li>Tear down a connection</li> </ul> <p>Most fo CPU cycles spent in ESTABLISHed state, for transferrring bytes.</p> <p>Too many articles talk about three-way handshake(3WH) and 4-times close.</p> <p></p>"},{"location":"Blogs/Network/tcp/#state-machine","title":"State Machine","text":""},{"location":"Blogs/Network/tcp/#tcp_1","title":"TCP\u672c\u8d28","text":"<p>\u5e26\u91cd\u4f20\u7684\u7d2f\u79ef\u6b63\u5411\u5e94\u7b54</p> <ol> <li>Cumulative positive acknowledgement with retransmission</li> <li>Flow control(sliding window)</li> <li>Congestion control</li> </ol>"},{"location":"Blogs/Network/tcp/#tcp-is-bidirectional","title":"TCP is bidirectional","text":"<p>TCP endpoint has both sender and receiver</p> <p>Is TCP Full-Duplex? From API yes, from impl, mayby.</p>"},{"location":"Blogs/Network/tcp/#tcpip-implementation","title":"TCP/IP Implementation","text":"<ul> <li>BSD     iOS/macOS</li> <li>Linux   Android / Chrome OS</li> <li>Windows PC / Laptop</li> <li>Solaris (Mentat TCP)</li> </ul> <p>User space gvisor, mtcp, seastar Iot (lwip) RFC 9006 Single-MSS</p>"},{"location":"Blogs/Network/tcp/#tcptp-drawbacks","title":"TCP/TP drawbacks","text":"<p>not providing enough address bits y2k, y2038, 4Gib max size on some file systems, MAX_PATH</p>"},{"location":"Blogs/Network/tcp/#hard-limits","title":"Hard limits","text":"<p>16-bit port number: limits the concurrency of a client(e.g.web crawler). wordaround</p> <p>32-bit sequence number: wraps within 1 second on 40GbE.   Timestamp options, uses 12 bytes in options</p> <p>16-bit window size: limits in-flight bytes and throughput Window scale option, max 1GB window, ws=7 or 8 is common nowadays.</p> <p>4-bit header length: 60-bytes max, minus 20 bytes, allowing for up to 40 bytes of options in header. Minus 12 bytes for TSopt, only 28 bytes for options like SACKs.</p>"},{"location":"Blogs/Others/A%20Way%20For%20Static%20Analyzing/","title":"ClangTidy\u4ee3\u7801\u9759\u6001\u68c0\u6d4b","text":""},{"location":"Blogs/Others/A%20Way%20For%20Static%20Analyzing/#clang-tidy","title":"clang-tidy","text":"<p>clang-tidy is a clang-based C++ \u201clinter\u201d tool. Its purpose is to provide an extensible framework for diagnosing and fixing typical programming errors, like style violations, interface misuse, or bugs that can be deduced via static analysis. clang-tidy is modular and provides a convenient interface for writing new checks.</p> <p>clang-tidy \u662f\u4e00\u4e2a\u57fa\u4e8e clang \u7684 C++\"linter\"\u5de5\u5177\u3002 \u5176\u7528\u4e8e\u8bca\u65ad\u548c\u4fee\u590d\u5178\u578b\u7684\u7f16\u7a0b\u9519\u8bef\uff0c\u5982\u98ce\u683c\u8fdd\u89c4\u3001\u754c\u9762\u8bef\u7528\u6216\u53ef\u901a\u8fc7\u9759\u6001\u5206\u6790\u63a8\u65ad\u51fa\u7684\u9519\u8bef\u3002 clang-tidy \u662f\u6a21\u5757\u5316\u7684\uff0c\u4e3a\u7f16\u5199\u65b0\u68c0\u67e5\u63d0\u4f9b\u4e86\u4e00\u4e2a\u65b9\u4fbf\u7684\u63a5\u53e3\u3002\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u4ee5\u4e0b\u5185\u5bb9\uff1a</p> <ul> <li>\u8fdd\u53cd\u4ee3\u7801\u89c4\u8303\u7684\u4ee3\u7801\u6a21\u5f0f\u76f8\u5173\u68c0\u6d4b</li> <li>\u4e0d\u5bb9\u6613\u5728\u7f16\u8bd1\u65f6\u53d1\u73b0\u7684\u4ee3\u7801\u9519\u8bef</li> <li>CERT\u7684\u4ee3\u7801\u89c4\u8303\u76f8\u5173\u68c0\u6d4b</li> <li>\u6f5c\u5728\u7684\u53ef\u80fd\u5bfc\u81f4\u7f13\u51b2\u533a\u6ea2\u51fa\u95ee\u9898\u76f8\u5173\u68c0\u67e5</li> <li>\u6f5c\u5728\u7684\u53ef\u80fd\u5bfc\u81f4\u5185\u5b58\u6cc4\u6f0f\u95ee\u9898\u76f8\u5173\u68c0\u67e5</li> <li>\u53ef\u80fd\u7531\u4ee3\u7801\u5bfc\u81f4\u7684\u672a\u5b9a\u4e49\u884c\u4e3a\uff08undefined behavior\uff09</li> </ul> <p>clang-tidy \u5b9e\u73b0\u4e86\u5bf9\u4ee3\u7801\u884c\u4e3a\u7684100\u591a\u79cd\u68c0\u6d4b\uff0c\u8fd9\u91cc\u6211\u4eec\u9009\u62e9\u4e86\u5176\u4e2d\u6d89\u53ca\u5230<code>\u90e8\u5206\u4ee3\u7801\u98ce\u683c\u9879</code>\u548c<code>\u5168\u90e8\u4ee3\u7801\u5b89\u5168\u9879</code>\u7684\u5ba1\u8ba1\uff0c\u4ee5\u907f\u514d\u53ef\u80fd\u5e26\u6765\u7684\u7cbe\u5ea6\u4e22\u5931\uff0c\u5185\u5b58\u6cc4\u6f0f\uff0c\u7f13\u51b2\u533a\u6ea2\u51fa\uff0c\u7b97\u672f\u6ea2\u51fa\u7b49\u7f16\u8bd1\u671f\u4e0d\u6613\u53d1\u73b0\u7684\u5178\u578b\u95ee\u9898\uff0c\u5177\u4f53\u68c0\u67e5\u5730\u5982\u4e0b\u8868\u6240\u793a\uff1a</p> cert\u89c4\u8303 \u63cf\u8ff0 cert-env33-c \u7cfb\u7edf\u8c03\u7528\u51fd\u6570\u68c0\u67e5 cert-err34-c \u7c7b\u578b\u8f6c\u6362\u51fd\u6570\u662f\u5426\u6709\u6548 cert-err33-c \u68c0\u67e5\u7cfb\u7edf\u8c03\u7528\u8fd4\u56de\u503c\u662f\u5426\u672a\u88ab\u4f7f\u7528 cert-err52-cpp setjmp()\uff0clongjmp() cert-dcl58-cpp \u5bf9std posix\u7b49\u547d\u540d\u7a7a\u95f4\u7684\u4fee\u6539 cert-err34-c \u4e0d\u9a8c\u8bc1\u8f6c\u6362\u5b57\u7b26\u4e32\u5230\u6570\u5b57\u7684\u6709\u6548\u6027\u7684\u4ee3\u7801\uff0c\u5982c\u8bed\u8a00atoi() cert-flp30-c \u68c0\u67e5\u6d6e\u70b9\u7c7b\u578b\u7684\u5faa\u73af <p>\u6ce8\uff1acert-err33-c \u68c0\u6d4b\u8303\u56f4\uff1a</p> <pre><code>::aligned_alloc;::asctime_s;::at_quick_exit;::atexit;::bsearch;::bsearch_s;::btowc;::c16rtomb;::c32rtomb;::calloc;::clock;::cnd_broadcast;::cnd_init;::cnd_signal;::cnd_timedwait;::cnd_wait;::ctime_s;::fclose;::fflush;::fgetc;::fgetpos;::fgets;::fgetwc;::fopen;::fopen_s;::fprintf;::fprintf_s;::fputc;::fputs;::fputwc;::fputws;::fread;::freopen;::freopen_s;::fscanf;::fscanf_s;::fseek;::fsetpos;::ftell;::fwprintf;::fwprintf_s;::fwrite;::fwscanf;::fwscanf_s;::getc;::getchar;::getenv;::getenv_s;::gets_s;::getwc;::getwchar;::gmtime;::gmtime_s;::localtime;::localtime_s;::malloc;::mbrtoc16;::mbrtoc32;::mbsrtowcs;::mbsrtowcs_s;::mbstowcs;::mbstowcs_s;::memchr;::mktime;::mtx_init;::mtx_lock;::mtx_timedlock;::mtx_trylock;::mtx_unlock;::printf_s;::putc;::putwc;::raise;::realloc;::remove;::rename;::scanf;::scanf_s;::setlocale;::setvbuf;::signal;::snprintf;::snprintf_s;::sprintf;::sprintf_s;::sscanf;::sscanf_s;::strchr;::strerror_s;::strftime;::strpbrk;::strrchr;::strstr;::strtod;::strtof;::strtoimax;::strtok;::strtok_s;::strtol;::strtold;::strtoll;::strtoul;::strtoull;::strtoumax;::strxfrm;::swprintf;::swprintf_s;::swscanf;::swscanf_s;::thrd_create;::thrd_detach;::thrd_join;::thrd_sleep;::time;::timespec_get;::tmpfile;::tmpfile_s;::tmpnam;::tmpnam_s;::tss_create;::tss_get;::tss_set;::ungetc;::ungetwc;::vfprintf;::vfprintf_s;::vfscanf;::vfscanf_s;::vfwprintf;::vfwprintf_s;::vfwscanf;::vfwscanf_s;::vprintf_s;::vscanf;::vscanf_s;::vsnprintf;::vsnprintf_s;::vsprintf;::vsprintf_s;::vsscanf;::vsscanf_s;::vswprintf;::vswprintf_s;::vswscanf;::vswscanf_s;::vwprintf_s;::vwscanf;::vwscanf_s;::wcrtomb;::wcschr;::wcsftime;::wcspbrk;::wcsrchr;::wcsrtombs;::wcsrtombs_s;::wcsstr;::wcstod;::wcstof;::wcstoimax;::wcstok;::wcstok_s;::wcstol;::wcstold;::wcstoll;::wcstombs;::wcstombs_s;::wcstoul;::wcstoull;::wcstoumax;::wcsxfrm;::wctob;::wctrans;::wctype;::wmemchr;::wprintf_s;::wscanf;::wscanf_s;\n</code></pre> bugprone\u76f8\u5173 \u63cf\u8ff0 bugprone-dangling-handle \u68c0\u6d4b\u503c\u53e5\u67c4\u4e2d\u7684\u5782\u60ac\u5f15\u7528 bugprone-assert-side-effect assert() \u5e26\u6765\u7684\u6f5c\u5728\u526f\u4f5c\u7528 bugprone-dynamic-static-initializers \u7981\u6b62\u8fd4\u56de\u52a8\u6001\u521d\u59cb\u5316\u7684\u9759\u6001\u53d8\u91cf bugprone-exception-escape \u7981\u6b62\u5728\u4e00\u4e9b\u51fd\u6570\u5185\u629b\u51fa\u5f02\u5e38\uff0c\u907f\u514d\u5e26\u6765\u4e00\u4e9b\u98ce\u9669\uff08\u6790\u6784\u51fd\u6570\u3001\u79fb\u52a8\u6784\u9020\u51fd\u6570\u3001\u79fb\u52a8\u8d4b\u503c\u8fd0\u7b97\u7b26\u3001main\u51fd\u6570\u3001swap\u51fd\u6570\u7b49\uff09 bugprone-fold-init-type \u68c0\u67e5\u622a\u65ad\u548c\u6ea2\u51fa\u7684\u60c5\u51b5 bugprone-forward-declaration-namespace \u68c0\u67e5\u540c\u540d\u4f46\u672a\u5b9a\u4e49\u7684\u547d\u540d\u7a7a\u95f4 bugprone-incorrect-roundings \u6392\u9664\u4e0d\u6b63\u786e\u820d\u5165\u95ee\u9898 bugprone-infinite-loop \u68c0\u67e5\u5bb9\u6613\u51fa\u9519\u7684\u65e0\u9650\u5faa\u73af bugprone-integer-division \u68c0\u67e5\u4f1a\u5bfc\u81f4\u7cbe\u5ea6\u635f\u5931\u7684\u6574\u6570\u9664\u6cd5 bugprone-macro-parentheses \u67e5\u627e\u7531\u4e8e\u7f3a\u5c11\u62ec\u53f7\u800c\u53ef\u80fd\u5177\u6709\u610f\u5916\u884c\u4e3a\u7684\u5b8f bugprone-misplaced-operator-in-strlen-in-alloc \u68c0\u67e5\u5b57\u7b26\u4e32\u64cd\u4f5c\u7684\u4e0d\u5f53\u884c\u4e3a bugprone-misplaced-pointer-arithmetic-in-alloc \u68c0\u67e5\u9519\u8bef\u7684\u6307\u9488\u52a8\u6001\u5206\u914d\u5185\u5b58 bugprone-misplaced-widening-cast \u7c7b\u578b\u8f6c\u6362\u9020\u6210\u7684\u7cbe\u5ea6\u635f\u5931 bugprone-no-escape \u67e5\u627e\u5bb9\u6613\u51fa\u9519\u7684noescape bugprone-not-null-terminated-result \u68c0\u67e5\u53ef\u80fd\u5bfc\u81f4\u975e\u7a7a\u7ec8\u6b62\u7ed3\u679c\u7684\u51fd\u6570\u8c03\u7528\uff0c\u4f7f\u7528strcpy()\u3001strncpy()\u3001strcpy_s()\u3001 strncpy_s()\u4ee3\u66ffmemcpy()\u548cmemcpy_s()\u7b49 bugprone-redundant-branch-condition \u68c0\u67e5\u903b\u8f91if\u7684\u91cd\u590d\u5224\u65ad\u5197\u4f59 bugprone-signed-char-misuse \u68c0\u67e5\u9519\u8bef\u7684\u5b57\u7b26\u578b\u4e0e\u5b57\u7b26\u578b\u3001\u6574\u578b\u4e4b\u95f4\u7684\u5f3a\u5236\u8f6c\u6362\u548c\u6bd4\u8f83 bugprone-sizeof-container \u68c0\u67e5\u53ef\u80fd\u51fa\u9519\u7684sizeof\u4f7f\u7528 bugprone-string-constructor \u68c0\u67e5\u5bb9\u6613\u51fa\u9519\u7684\u5b57\u7b26\u4e32\u521d\u59cb\u5316 bugprone-string-integer-assignment \u68c0\u67e5\u5bb9\u6613\u51fa\u9519\u7684\u5b57\u7b26\u4e32\u8d4b\u503c(\u53ef\u80fd\u5bfc\u81f4\u8bef\u5224) bugprone-string-literal-with-embedded-nul \u68c0\u67e5\u5e26\u6709\u5d4c\u5165'\\0'\u5b57\u7b26\u7684\u5b57\u7b26\u4e32 ugprone-suspicious-include.HeaderFileExtensions \u68c0\u67e5\u9519\u8bef\u7684\u6587\u4ef6\u5305\u542b bugprone-suspicious-memset-usage \u68c0\u67e5\u9519\u8bef\u7684memset\u7684\u4f7f\u7528 bugprone-too-small-loop-variable \u68c0\u67e5\u5bb9\u6613\u51fa\u9519\u7684\u5faa\u73af\u53d8\u91cf bugprone-suspicious-memset-usage \u68c0\u67e5\u9519\u8bef\u7684memset\u7684\u4f7f\u7528 bugprone-undefined-memory-manipulation \u67e5\u627e\u5bb9\u6613\u51fa\u9519\u7684\u672a\u5b9a\u4e49\u5185\u5b58\u64cd\u4f5c bugprone-unused-return-value \u68c0\u67e5\u672a\u4f7f\u7528\u7684\u4e00\u4e9b\u8fd4\u56de\u503c\uff08\u5982\u8fd4\u56de\u6307\u9488\uff09 bugprone-use-after-move \u7981\u6b62\u4f7f\u7528std::move\u4e4b\u540e\u7684\u5bf9\u8c61\u4ecd\u88ab\u4f7f\u7528 bugprone-virtual-near-miss \u68c0\u67e5\u51fd\u6570\u540d\u4e0e\u57fa\u7c7b\u865a\u51fd\u6570\u7c7b\u4f3c\u7684\u51fd\u6570\u58f0\u660e c++\u6838\u5fc3\u51c6\u5219\uff08cppcoreguidelines\uff09 \u63cf\u8ff0 cppcoreguidelines-avoid-goto \u907f\u514d\u4f7f\u7528goto cppcoreguidelines-avoid-non-const-global-variables \u7981\u6b62\u975e\u5e38\u91cf\u5168\u5c40\u53d8\u91cf cppcoreguidelines-interfaces-global-init \u68c0\u67e5extern\u5bf9\u8c61\u7684\u5168\u5c40\u53d8\u91cf\u7684\u521d\u59cb\u503c\u8bbe\u5b9a\u9879\u521d\u59cb\u5316\u987a\u5e8f\u95ee\u9898 cppcoreguidelines-macro-usage \u68c0\u67e5\u53ef\u80fd\u88ab\u8ba4\u4e3a\u6709\u95ee\u9898\u7684\u5b8f\u7528\u6cd5 cppcoreguidelines-narrowing-conversions \u7a84\u7c7b\u578b\u8f6c\u6362\u5e26\u6765\u7684\u7cbe\u5ea6\u4e22\u5931 cppcoreguidelines-no-malloc \u5bf9c\u98ce\u683c\u5185\u5b58\u5206\u914d\u7684\u68c0\u67e5 cppcoreguidelines-owning-memory \u68c0\u67e5\u5185\u5b58\u5206\u914d\u65f6\u662f\u5426\u4f7f\u7528gsl\u7684\u65b9\u6cd5 cppcoreguidelines-pro-bounds-array-to-pointer-decay \u6807\u5fd7\u6570\u7ec4\u5411\u6307\u9488\u7684\u9000\u5316 cppcoreguidelines-pro-bounds-pointer-arithmetic \u6807\u8bb0\u6307\u9488\u7684\u7b97\u6cd5\u4f7f\u7528 cppcoreguidelines-pro-type-const-cast \u6807\u8bb0const_cast\u7684\u4f7f\u7528 cppcoreguidelines-pro-type-union-access \u6807\u8bb0union\u6210\u5458\u7684\u8bbf\u95ee\u6743\u9650 cppcoreguidelines-pro-type-vararg \u6807\u8bb0\u5bf9c\u6837\u5f0f\u53ef\u53d8\u53c2\u6570\u51fd\u6570\u8c03\u7528\u4ee5\u53ca\u5bf9va_arg\u7684\u4f7f\u7528 cppcoreguidelines-slicing \u68c0\u67e5\u5bfc\u81f4slice\u7684\u60c5\u51b5 cppcoreguidelines-pro-type-static-cast-downcast \u5411\u4e0b\u8f6c\u6362\u65f6\u5c06\u6807\u8bb0\u672a\u4f7f\u7528dynamic_cast\u7684\u8f6c\u6362 <p>\u6ce8\uff1acppcoreguidelines-owning-memory\u68c0\u6d4b\u8303\u56f4\uff1a</p> <p>\u8d44\u6e90\u91ca\u653e: ::free;::realloc;::freopen;::fclose</p> <p>\u8d44\u6e90\u5206\u914d: ::malloc;::aligned_alloc;::realloc;::calloc;::fopen;::freopen;::tmpfile</p> Google\u89c4\u8303 \u63cf\u8ff0 google-default-arguments \u4e3a\u865a\u51fd\u6570\u53c2\u6570\u6dfb\u52a0\u9ed8\u8ba4\u503c google-explicit-constructor \u68c0\u67e5\u663e\u5f0f\u6784\u9020\u51fd\u6570\uff0c\u907f\u514d\u9690\u5f0f\u8f6c\u6362\u5e26\u6765\u7684\u98ce\u9669 google-runtime-int \u68c0\u67e5\u6574\u6570\u5b9a\u4e49\uff0c\u5c06short, long\uff0clong long\u6539\u4e3aintxx_\u7c7b\u578b google-runtime-operator \u68c0\u67e5\u7528\u6237\u81ea\u5b9a\u4e49\u8868\u8ff0\u7684\u91cd\u8f7d\u8fd0\u7b97\u7b26 google-readability-casting \u67e5\u627e C \u98ce\u683c\u5f3a\u5236\u8f6c\u6362\u7684\u7528\u6cd5 clang\u5206\u6790\u5668\uff08clang-analyzer\uff09 \u63cf\u8ff0 clang-analyzer-core.uninitialized.CapturedBlockVariable \u68c0\u67e5\u672a\u521d\u59cb\u5316\u7684\u5757 clang-analyzer-cplusplus.InnerPointer \u68c0\u67e5\u91ca\u653e\u540e\u7684\u5185\u90e8\u6307\u9488\u7684\u4f7f\u7528 clang-analyzer-nullability.NullableReturnedFromNonnull \u68c0\u67e5\u4ece\u975e\u7a7a\u8fd4\u56de\u7c7b\u578b \u8fd4\u56de \u53ef\u80fd\u7a7a\u7684\u6307\u9488 clang-analyzer-optin.performance.Padding \u68c0\u67e5\u8fc7\u5ea6\u586b\u5145\u7684\u7ed3\u6784 modernize\u76f8\u5173 \u63cf\u8ff0 modernize-use-noexcept \u51fd\u6570\u5b9a\u4e49\u7684throw\u66ff\u6362\u4e3anoexcept modernize-use-bool-literals \u627e\u51fa\u6240\u6709\u9690\u5f0f\u4eceint\u8f6c\u6210bool\u7684literal, \u4f7f\u7528true\u6216\u8005false\u4ee3\u66ff modernize-use-nullptr \u7528nullptr\u4ee3\u66ffNULL modernize-use-override \u5bf9\u4e8e\u5b50\u7c7b\u6539\u5199\u7236\u7c7b\u7684virtual\u65b9\u6cd5\uff0c\u5728\u65b9\u6cd5\u540e\u9762\u6dfb\u52a0override, \u5e76\u5220\u6389virtual\u524d\u7f00"},{"location":"Blogs/Others/Clang-Tidy/","title":"Nesessary Checks","text":"<p>All checks listed here</p> <p>We do NOT focus on all of them</p> <p>Here's what we checks for typically c++ standard</p> <ul> <li> <p>bugprone-*</p> <p>\u68c0\u67e5\u76ee\u6807\u5bb9\u6613\u51fa\u9519\u7684\u4ee3\u7801\u7ed3\u6784</p> </li> <li> <p>bugprone-dynamic-static-initializers \u7981\u6b62\u8fd4\u56de\u52a8\u6001\u521d\u59cb\u5316\u7684\u9759\u6001\u53d8\u91cf</p> </li> <li>bugprone-fold-init-type \u68c0\u67e5\u622a\u65ad\u548c\u6ea2\u51fa\u7684\u60c5\u51b5</li> <li>bugprone-forward-declaration-namespace \u68c0\u67e5\u540c\u540d\u4f46\u672a\u5b9a\u4e49\u7684\u547d\u540d\u7a7a\u95f4</li> <li>bugprone-infinite-loop \u68c0\u67e5\u5bb9\u6613\u51fa\u9519\u7684\u65e0\u9650\u5faa\u73af</li> <li>bugprone-integer-division \u68c0\u67e5\u4f1a\u5bfc\u81f4\u7cbe\u5ea6\u635f\u5931\u7684\u6574\u6570\u9664\u6cd5</li> <li>bugprone-macro-parentheses \u67e5\u627e\u7531\u4e8e\u7f3a\u5c11\u62ec\u53f7\u800c\u53ef\u80fd\u5177\u6709\u610f\u5916\u884c\u4e3a\u7684\u5b8f</li> <li>bugprone-misplaced-operator-in-strlen-in-alloc \u68c0\u67e5\u5b57\u7b26\u4e32\u64cd\u4f5c\u7684\u4e0d\u5f53\u884c\u4e3a</li> <li>bugprone-misplaced-pointer-arithmetic-in-alloc \u68c0\u67e5\u9519\u8bef\u7684\u6307\u9488\u52a8\u6001\u5206\u914d\u5185\u5b58</li> <li>bugprone-misplaced-widening-cast \u7c7b\u578b\u8f6c\u6362\u9020\u6210\u7684\u7cbe\u5ea6\u635f\u5931</li> <li>bugprone-no-escape \u67e5\u627e\u5bb9\u6613\u51fa\u9519\u7684noescape</li> <li>bugprone-redundant-branch-condition \u68c0\u67e5\u903b\u8f91if\u7684\u91cd\u590d\u5224\u65ad\u5197\u4f59</li> <li>bugprone-signed-char-misuse \u68c0\u67e5\u9519\u8bef\u7684\u5b57\u7b26\u578b\u4e0e\u5b57\u7b26\u578b\u3001\u6574\u578b\u4e4b\u95f4\u7684\u5f3a\u5236\u8f6c\u6362\u548c\u6bd4\u8f83</li> <li>bugprone-sizeof-container \u68c0\u67e5\u53ef\u80fd\u51fa\u9519\u7684sizeof\u4f7f\u7528</li> <li>bugprone-string-constructor \u68c0\u67e5\u5bb9\u6613\u51fa\u9519\u7684\u5b57\u7b26\u4e32\u521d\u59cb\u5316</li> <li>bugprone-string-integer-assignment \u68c0\u67e5\u5bb9\u6613\u51fa\u9519\u7684\u5b57\u7b26\u4e32\u8d4b\u503c(\u53ef\u80fd\u5bfc\u81f4\u8bef\u5224)</li> <li>ugprone-suspicious-include.HeaderFileExtensions \u68c0\u67e5\u9519\u8bef\u7684\u6587\u4ef6\u5305\u542b</li> <li>bugprone-suspicious-memset-usage \u68c0\u67e5\u9519\u8bef\u7684memset\u7684\u4f7f\u7528</li> <li>bugprone-too-small-loop-variable \u68c0\u67e5\u5bb9\u6613\u51fa\u9519\u7684\u5faa\u73af\u53d8\u91cf</li> <li>bugprone-undefined-memory-manipulation \u67e5\u627e\u5bb9\u6613\u51fa\u9519\u7684\u672a\u5b9a\u4e49\u5185\u5b58\u64cd\u4f5c</li> <li>bugprone-unused-return-value \u68c0\u67e5\u672a\u4f7f\u7528\u7684\u4e00\u4e9b\u8fd4\u56de\u503c\uff08\u5982\u8fd4\u56de\u6307\u9488\uff09</li> <li>bugprone-use-after-move \u7981\u6b62\u4f7f\u7528std::move\u4e4b\u540e\u7684\u5bf9\u8c61\u4ecd\u88ab\u4f7f\u7528</li> <li> <p>bugprone-virtual-near-miss \u68c0\u67e5\u51fd\u6570\u540d\u4e0e\u57fa\u7c7b\u865a\u51fd\u6570\u7c7b\u4f3c\u7684\u51fd\u6570\u58f0\u660e</p> </li> <li> <p>cert-*</p> <p>\u4e0e CERT \u5b89\u5168\u7f16\u7801\u6307\u5357\u76f8\u5173\u7684\u68c0\u67e5</p> </li> <li> <p>clang-analyzer-*</p> <p>Clang \u9759\u6001\u5206\u6790\u5668\u68c0\u67e5</p> </li> <li> <p>cppcoreguidelines-*</p> <p>\u4e0e C++ \u6838\u5fc3\u6307\u5357\u76f8\u5173\u7684\u68c0\u67e5   - cppcoreguidelines-avoid-non-const-global-variables \u7981\u6b62\u975e\u5e38\u91cf\u5168\u5c40\u53d8\u91cf   - cppcoreguidelines-interfaces-global-init \u68c0\u67e5extern\u5bf9\u8c61\u7684\u5168\u5c40\u53d8\u91cf\u7684\u521d\u59cb\u503c\u8bbe\u5b9a\u9879\u521d\u59cb\u5316\u987a\u5e8f\u95ee\u9898   - cppcoreguidelines-macro-usage \u68c0\u67e5\u53ef\u80fd\u88ab\u8ba4\u4e3a\u6709\u95ee\u9898\u7684\u5b8f\u7528\u6cd5   - cppcoreguidelines-narrowing-conversions   - cppcoreguidelines-no-malloc \u5bf9c\u98ce\u683c\u5185\u5b58\u5206\u914d\u7684\u68c0\u67e5   - cppcoreguidelines-owning-memory \u68c0\u67e5\u5185\u5b58\u5206\u914d\u65f6\u662f\u5426\u4f7f\u7528gsl\u7684\u65b9\u6cd5   - cppcoreguidelines-prefer-member-initializer   - cppcoreguidelines-pro-bounds-array-to-pointer-decay   - cppcoreguidelines-pro-bounds-constant-array-index   - cppcoreguidelines-pro-bounds-pointer-arithmetic \u6807\u8bb0\u6307\u9488\u7684\u7b97\u6cd5\u4f7f\u7528   - cppcoreguidelines-pro-type-const-cast   \u6807\u8bb0const_cast\u7684\u4f7f\u7528   - cppcoreguidelines-pro-type-cstyle-cast   - cppcoreguidelines-pro-type-member-init   - cppcoreguidelines-pro-type-vararg   - cppcoreguidelines-slicing \u68c0\u67e5\u5bfc\u81f4slice\u7684\u60c5\u51b5   - cppcoreguidelines-special-member-functions</p> </li> <li> <p>google-*</p> <p>\u4e0e Google \u7f16\u7801\u7ea6\u5b9a\u76f8\u5173\u7684\u68c0\u67e5   - google-build-explicit-make-pair \u68c0\u67e5make_pair\u662f\u5426\u63a8\u65ad\u51fa\u6a21\u677f\u7c7b\u578b   - google-build-namespaces   - google-build-using-namespace \u68c0\u67e5\u662f\u5426\u4f7f\u7528using namespace   - google-default-arguments \u4e3a\u865a\u51fd\u6570\u53c2\u6570\u6dfb\u52a0\u9ed8\u8ba4\u503c   - google-explicit-constructor \u68c0\u67e5\u663e\u5f0f\u6784\u9020\u51fd\u6570\uff0c\u907f\u514d\u9690\u5f0f\u8f6c\u6362\u5e26\u6765\u7684\u98ce\u9669   - google-global-names-in-headers \u5728\u5934\u6587\u4ef6\u4e2d\u6807\u8bb0\u5168\u5c40\u547d\u540d\u7a7a\u95f4\u6c61\u67d3   - google-objc-avoid-nsobject-new   - google-objc-avoid-throwing-exception   - google-objc-function-naming   - google-objc-global-variable-declaration   - google-readability-avoid-underscore-in-googletest-name   - google-readability-casting \u67e5\u627e C \u98ce\u683c\u5f3a\u5236\u8f6c\u6362\u7684\u7528\u6cd5   - google-readability-todo \u67e5\u627eTODO\u6709\u6ca1\u6709\u7f72\u7528\u6237\u540d\u3001\u90ae\u4ef6\u7b49   - google-runtime-int \u68c0\u67e5\u6574\u6570\u5b9a\u4e49\uff0c\u5c06short, long\uff0clong long\u6539\u4e3aintxx_\u7c7b\u578b   - google-runtime-operator \u68c0\u67e5\u7528\u6237\u81ea\u5b9a\u4e49\u8868\u8ff0\u7684\u91cd\u8f7d\u8fd0\u7b97\u7b26   - google-upgrade-googletest-case \u7528\u6237\u81ea\u5b9a\u4e49\u51fd\u6570\u540d\u4e2d\uff0c\u5c06\u5e26\u6709case\u5b57\u7b26\u6539\u4e3asuite</p> </li> <li> <p>modernize-*</p> </li> </ul> <p>\u63d0\u5021\u4f7f\u7528\u73b0\u4ee3\u8bed\u8a00\u7ed3\u6784\u7684\u68c0\u67e5   - modernize-use-noexcept \u51fd\u6570\u5b9a\u4e49\u7684throw\u66ff\u6362\u4e3anoexcept   - modernize-use-nullptr \u5c06\u7a7a\u6307\u9488NULL\u6539\u4e3anullptr   - modernize-use-override \u5728\u91cd\u8f7d\u865a\u51fd\u6570\u4e2d\u6dfb\u52a0override\u58f0\u660e</p>"},{"location":"Blogs/Others/Fix%20ArkOS%20Not%20Booted%20%28Black%20Screen%29%20On%20RGB30/","title":"ArkOS Failed On PowKiddy RGB30","text":"<p>I've got a PowKiddy RGB30 recently and trying to install ArkOS for better performance on PSX. </p> <p>I followed the tutorial on ArkOS Wiki, downloaded the image for rgb30 and flashing it into the sdcard.</p> <p>Error occured, on booting the OS.</p>"},{"location":"Blogs/Others/Fix%20ArkOS%20Not%20Booted%20%28Black%20Screen%29%20On%20RGB30/#issue-description","title":"Issue Description","text":"<p>The first time I insert the sd card and launch the rgb30, the ArkOS logo appeared, indicated that it could successfully boot.</p> <p>The OS then tried to format the EASYROM disk partition:</p> <p> </p> <p>unfortunately, that's all. It automatically reboot after a short stuck, and nothing would happen ever, falling into endless dark with the green light on. (I cover the light with a red star sticker because the light is so dazzling)</p> <p>No matter how many times you reboot the machine, there is no response on it. Got the same result even if I reflashing the sdcard and ArkOS and repeating the process above again and again.</p> <p>I checked the disk status of the sdcard, It shows:</p> <p></p> <p>Just failed.</p>"},{"location":"Blogs/Others/Fix%20ArkOS%20Not%20Booted%20%28Black%20Screen%29%20On%20RGB30/#a-really-rude-solution","title":"A Really Rude Solution","text":"<p>I'm pretty sure that this 16g sdcard of sandisk doesn't have any quality problem because I flashed the Jelos in it and it worked well.</p> <p>I found another uesless sdcard and tried to install ArkOS again on it. After the second picture showed above, it ran further and successfully formatted the disk partition then launched into ArkOS.</p> <p>I don't know why this sd card works fine on ArkOS but the previous not.</p> <p>So I tried a way to mirror the structure and data of the normally-worked card to previous card. Wrote the totally same data, bit to bit.</p> <p>And it worked, succeeded in booting. Here I'll list the operations that I've done. Hope it does also work for you.</p>"},{"location":"Blogs/Others/Fix%20ArkOS%20Not%20Booted%20%28Black%20Screen%29%20On%20RGB30/#preperations","title":"Preperations","text":"<ol> <li> <p>Disk Genius (must)</p> <p>Used for dumping the disk to an image and restoring the image to another disk.</p> </li> <li> <p>Rufus (alternative)</p> <p>Flash the os image. Could be replaced by others.</p> </li> </ol>"},{"location":"Blogs/Others/Fix%20ArkOS%20Not%20Booted%20%28Black%20Screen%29%20On%20RGB30/#dump-disk-image","title":"Dump Disk Image","text":"<ol> <li> <p>Follow the ArkOS Wiki, flash the Arkos to the sdcard.</p> </li> <li> <p>Inserted it into the rgb30 and finish the operations when first boot. The layout of the disk should be:</p> <p></p> </li> <li> <p>Open Disk Genius, right click your disk, and select:</p> <p></p> <p>Mine is Chinese, you can chekck it here in English. And check this on, select a place where to save the dumped disk image on your computer.</p> <p></p> <p>The dg image file(.pmfx) looks like this:</p> <p></p> </li> </ol>"},{"location":"Blogs/Others/Fix%20ArkOS%20Not%20Booted%20%28Black%20Screen%29%20On%20RGB30/#restore-to-any-another-sdcard","title":"Restore To Any Another SDCard","text":"<ol> <li> <p>Insert the to-be-restored sdcard in your computer. </p> </li> <li> <p>Open Disk Genius and Deleted all partitions on it. Must ensure that it was totally empty and not formatted. Then click the left-right corner botton on disk genius to save the changes.</p> </li> <li> <p>right click your disk, and select the restore-disk-from-image-file. (Just one line below the arrow of the picture). Then find the image that you dumped before and restore from it.</p> </li> <li> <p>Wait till the operation finished. Notice if there's any error occur. If errors raised you need to repeat the operations from step 2, erase it and redo.</p> </li> <li> <p>unplug the sdcard and insert it into rgb30. The device should be properly booted and will launch the ArkOS.</p> </li> </ol>"},{"location":"Blogs/Others/Fix%20ArkOS%20Not%20Booted%20%28Black%20Screen%29%20On%20RGB30/#end","title":"End","text":"<p>I rebooted several times and played games for hours, it worked pretty well and seems stable. No crash, no stuck. Also tested wifi and online update successfully.</p> <p>If you don't have any sdcard that could properly boot the ArkOS . I could upload my dumped disk image, the .pmfx file, for you if needed. Just restore the image to your sdcards with disk genius should also works well.</p> <p>At least I can found the stable way to install the arkos..</p>"},{"location":"Books/","title":"\ud83d\udcd6 &amp; \u2615 \ufe0f","text":"<p>\u8bfb\u4e66\u7834\u4e07\u5377\uff0c\u4e0b\u7b14\u5982\u6709\u795e</p>"},{"location":"Pico-8/","title":"Index","text":"<p>BBS\ud83e\udd73</p> <p>Wiki\ud83e\udd28</p>"},{"location":"Pico-8/Games/whatout/","title":"What's Out","text":"<p>The very first game for my gruduation gift.</p> <p>\"Run out of the tower!\"</p>"},{"location":"Tutorials/Chromium%20Tutorial/","title":"Chromium Compile Guide","text":"<p>Ver 2.0</p> <p>Author: Hank</p> <p>\u8bf7\u53c2\u8003\u5b98\u65b9\u6587\u6863\uff1awindows_build_instructions</p>"},{"location":"Tutorials/Chromium%20Tutorial/#change-log","title":"Change Log","text":"<p>v1.0 add some description details</p> <p>v2.0 \u6e90\u7801\u6784\u5efa\u65b9\u5f0f\u53d1\u751f\u8f83\u5927\u53d8\u5316\uff0c\u8bf7\u4ee5\u5b98\u65b9\u6587\u6863\u4e3a\u4e3b\uff01</p>"},{"location":"Tutorials/Chromium%20Tutorial/#i-compile-environment","title":"i. Compile Environment","text":"<ol> <li> <p>IDE</p> <p>Visual Studio 2022</p> <ol> <li> <p>\u4f7f\u7528 C++ \u684c\u9762\u5f00\u53d1</p> <p>Vusual Studio C++ \u5fc5\u987b\u6a21\u5757</p> </li> <li> <p>Windows 11 SDK</p> <p>\u5728\u5176\u4ed6\u7ec4\u4ef6\u4e2d\u627e\u5230\u5bf9\u5e94\u5de5\u5177\u96c6\u52fe\u9009\u5b89\u88c5</p> </li> <li> <p>Debugging Tools for Windows</p> <p>This version of the Debugging tools is needed in order to support reading the large-page PDBs that Chrome uses to allow greater-than 4 GiB PDBs.</p> <p>If you don't know how to install, check this</p> </li> </ol> </li> <li> <p>VPN</p> <p>\u4ece\u4ed3\u5e93fetch &amp; update\u7b2c\u4e09\u65b9\u5e93\u6e90\u7801\uff0c\u8fd9\u4e9b\u5899\u5916\u4e09\u65b9\u5e93\u9700\u8981\u68af\u5b50\uff0c\u8fd9\u91cc\u81ea\u5907\u4e0d\u505a\u8be6\u8ff0\uff0c\u76f4\u63a5\u8df3\u5230\u4ee3\u7406\u8bbe\u7f6e\u3002</p> <pre><code>git config --global http.proxy http://localhost:port\ngit config --global https.proxy http://localhost:port\n\n# \u5982\u679c\u5c06\u6765\u8981\u53d6\u6d88\u4ee3\u7406\ngit config --global --unset http.proxy\ngit config --global --unset https.proxy\n</code></pre> </li> <li> <p>INSTALL depot_tools</p> <p>Please focus on this tutorial</p> <p>Remind to check that your environment variables are properly settled</p> <p>and then execute:</p> <pre><code>gclient\n</code></pre> </li> <li> <p>Enviroment Variable</p> <p>\u8bbe\u7f6e\u4e34\u65f6\u6216\u8005\u6c38\u4e45\u7684\u73af\u5883\u53d8\u91cf\uff0c\u53cd\u6b63\u4e4b\u540e\u6bcf\u6b21\u64cd\u4f5c\u90fd\u4f1a\u7528\u5230\u5bf9\u5e94\u7684\u53d8\u91cf</p> <pre><code>set DEPOT_TOOLS_WIN_TOOLCHAIN=0\nset http_proxy=\"http://127.0.0.1:7890\"\nset https_proxy=\"https://127.0.0.1:7890\"\n</code></pre> <p>\u6ce8\u610f\uff1a\u8fd9\u91cc\u53ef\u4ee5\u4f7f\u7528powershell\uff0c\u4f46\u662f\u540e\u9762\u6709\u4e9b\u547d\u4ee4\u4e0d\u7b26\u5408powershell\u8bed\u6cd5\u6267\u884c\u4f1a\u51fa\u9519\uff0c\u7b14\u8005\u4e0d\u4f1a\u6539\uff0c\u6240\u4ee5\u5728\u8fd9\u91cc\u548c\u4e4b\u540e\u9ed8\u8ba4\u7edf\u4e00\u4f7f\u7528cmd\u4f5c\u4e3acli\u7ec8\u7aef</p> </li> </ol>"},{"location":"Tutorials/Chromium%20Tutorial/#ii-source-code-synchronization","title":"ii. Source Code Synchronization","text":"<p>\u65b0\u5efa\u6587\u4ef6\u5939</p> <pre><code>mkdir chromium &amp;&amp; cd chromium\n</code></pre> <p>\u5728 chromium \u76ee\u5f55\u4e0b\u8fd0\u884c\u547d\u4ee4\u884c\u7ec8\u7aef</p> <pre><code>fetch chromium --no-history --depth=1\ngclient sync\n</code></pre> <p>\u6ce8\u610f\uff1a \u8fd9\u4e2d\u9014\u5982\u679c\u7ec8\u7aef\u5173\u95ed\uff0c\u91cd\u65b0\u542f\u52a8\u540e\u4e4b\u524d\u7684\u73af\u5883\u53d8\u91cf\u4f1a\u5931\u6548\uff0c\u9700\u8981\u518d\u6b21\u9075\u5faa\u4ee5\u4e0a\u6b65\u9aa4\u8bbe\u7f6e\u5fc5\u8981\u7684\u73af\u5883\u53d8\u91cf\uff0c\u4e0b\u6587\u540c\u7406\uff0c\u4e0d\u518d\u89e3\u91ca</p>"},{"location":"Tutorials/Chromium%20Tutorial/#iii-project-generation","title":"iii. Project Generation","text":"<p>\u5728 chromium/src \u76ee\u5f55\u4e0b\u8fd0\u884c\u547d\u4ee4\u884c\u7ec8\u7aef</p> <pre><code># windows platform\n# dir: out/Debug_x64\ngn gen out/Debug_x64 --ide=vs2019 --args=\"target_os=\\\"win\\\" target_cpu=\\\"x64\\\" is_component_build=true is_debug=true is_official_build=false proprietary_codecs=true media_use_ffmpeg=true ffmpeg_branding=\\\"Chrome\\\" enable_nacl=false enable_widevine=true\"\n\n# dir: out/Debug_x64_mini\n# \u751f\u6210\u7cbe\u7b80\u8c03\u8bd5\u7248\u672c\uff0c\u5982\u679c\u5e26--no-dep\u53c2\u6570\u53ea\u4f1a\u5305\u542bchrome\u5de5\u7a0b\uff0c\u5426\u5219all.sln\u9879\u76ee\u91cc\u53ea\u6709chrome\u5de5\u7a0b\u4ee5\u53ca\u4f9d\u8d56\u5de5\u7a0b\ngn gen out/Debug_x64_mini --ide=vs2019 --filters=//chrome --no-dep --args=\"target_os=\\\"win\\\" target_cpu=\\\"x64\\\" is_component_build=true is_debug=true is_official_build=false proprietary_codecs=true media_use_ffmpeg=true ffmpeg_branding=\\\"Chrome\\\" enable_nacl=false enable_widevine=true\"\n\n# dir: out/Release_x64\ngn gen out/Release_x64 --ide=vs2019 --args=\"target_os=\\\"win\\\" target_cpu=\\\"x64\\\" is_component_build=false is_debug=false is_official_build=true proprietary_codecs=true media_use_ffmpeg=true ffmpeg_branding=\\\"Chrome\\\" enable_nacl=false enable_widevine=true\"\n\n# macOS platform\n# dir: out/Debug_x64\ngn gen out/Debug_x64 --ide=xcode --args=\"is_component_build=true is_debug=true is_official_build=false proprietary_codecs=true media_use_ffmpeg=true ffmpeg_branding=\\\"Chrome\\\" target_cpu =\\\"arm64\\\" enable_nacl=false \"\n\n# dir: out/arm_x64\ngn gen out/arm_x64 --ide=xcode --args=\"is_component_build=false is_debug=false is_official_build=true proprietary_codecs=true media_use_ffmpeg=true ffmpeg_branding=\\\"Chrome\\\" target_cpu =\\\"arm64\\\" enable_nacl=false \"\n\n# dir: out/Release_x64\ngn gen out/Release_x64 --ide=xcode --args=\"is_component_build=false target_cpu=\\\"x64\\\"  is_debug=false is_official_build=true proprietary_codecs=true media_use_ffmpeg=true ffmpeg_branding=\\\"Chrome\\\" enable_nacl=false \"\n</code></pre>"},{"location":"Tutorials/Chromium%20Tutorial/#iv-compile","title":"iv. Compile","text":"<p>\u6253\u5f00 out/xxxx\uff08\u4f60\u7684\u89e3\u51b3\u65b9\u6848\u751f\u6210\u8def\u5f84\uff09\u4e0b\u7684 <code>args.gn</code>\uff0c\u8ffd\u52a0\u5982\u4e0b\uff1a</p> <pre><code>google_api_key = \"AIzaSyDVg1wMsDLUbO07bLbSJ-FZOu26VcZ0x8w\"\ngoogle_default_client_id = \"1062540499206-grf7pu0s12rdtrridioirvt73mrooenj.apps.googleusercontent.com\"\ngoogle_default_client_secret = \"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\"\n</code></pre> <p>\u5728 chromium/src \u76ee\u5f55\u4e0b\u8fd0\u884c <code>vs</code> \u547d\u4ee4\u884c\u7ec8\u7aef(Develop Command prompt for VS 2022)</p> <pre><code>ninja -C out\\Debug_x64_mini chrome # your project dir\nninja -C out\\Release_x64 chrome # your project dir\n</code></pre>"},{"location":"Tutorials/Chromium%20Tutorial/#v-pack-and-release","title":"v. Pack and Release","text":"<p>\u5728 chromium/src \u76ee\u5f55\u4e0b\u8fd0\u884c\u547d\u4ee4\u884c\u7ec8\u7aef</p> <p>\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u7f16\u8bd1\u751f\u6210\u5b89\u88c5\u5305\uff0c\u751f\u6210\u7684\u5b89\u88c5\u5305\u540d\u79f0\u4e3a<code>mini_installer.exe</code>, \u5b58\u50a8\u5728<code>out</code>\u76ee\u5f55\u4e0b\u3002</p> <pre><code>ninja -C out\\Debug_x64_mini mini_installer\nninja -C out\\Release_x64 mini_installer\n</code></pre>"},{"location":"Tutorials/Chromium%20Tutorial/#vi-resigned","title":"vi. Resigned","text":"<p>\u89e3\u5305\u91cd\u7b7e\u540d</p>"},{"location":"Tutorials/clang-tidy%20tutorial/","title":"Clang Tidy Tutorial","text":"<p>Official Docs</p> <p>ref</p> <p>How do we use a automatic static code analyzer to perform the check operation for our project?</p> <p>Here is a way which only suitable for static analyzing on &amp; only on CMake Project, mostly not suitable on windows(msvc)</p>"},{"location":"Tutorials/clang-tidy%20tutorial/#pre-condition","title":"Pre-Condition","text":"<ol> <li>Install LLVM tool kit on your PC.</li> <li>Set environment variable correctly.</li> <li>Have some echos while typing `clang-tidy --version' on terminal.</li> </ol>"},{"location":"Tutorials/clang-tidy%20tutorial/#on-clang-gcc-compiler","title":"On Clang &amp; GCC compiler","text":""},{"location":"Tutorials/clang-tidy%20tutorial/#set-properties","title":"SET PROPERTIES","text":"<p>CMake provide us a really simple way to do this since version &lt;3.6&gt;. Just set <code>CMAKE_&lt;LANG&gt;_CLANG_TIDY</code> in your CMakeLists.txt.</p> <p>This will set default value for <code>&lt;LANG&gt;_CLANG_TIDY</code> target property. Actually the variable <code>CMAKE_CXX_CLANG_TIDY</code> is just used to initialize the target property <code>CXX_CLANG_TIDY</code>. It has to be defined before the targets are added. Defining it at the end of the file is too late.</p> <p>Note!! it works only with Makefiles and Ninja. It doesn't work with msbuild.</p>"},{"location":"Tutorials/clang-tidy%20tutorial/#passing-arguments-to-clang-tidy","title":"PASSING ARGUMENTS TO CLANG-TIDY","text":"<p>Specify a semicolon-separated list containing a command line for the clang-tidy tool.</p> <p>e.g.</p> <pre><code>set(\n    CMAKE_CXX_CLANG_TIDY \n    clang-tidy \n    -checks=-*,readability-*;\n    -config-file='';\n    -dump-config;\n    )\n</code></pre> <p>Here is all options for clang-tidy. These are basically tutorial on Clang &amp; GCC.</p>"},{"location":"Tutorials/clang-tidy%20tutorial/#on-msbuild-or-vs","title":"On MSBuild or VS","text":"<p>Typically follow this Guild.</p> <p>And this Guild.</p> <p>Just Because MSbuild is a piece of shit. No comment.</p>"},{"location":"Tutorials/clang-tidy%20tutorial/#export-results","title":"Export Results","text":"<p>Add -export-fixes option and specify the YAML file to store suggested fixes in. The stored fixes can be applied to the input source code with clang-apply-replacements.</p> <p>Also, by our great CMake, you can set variable <code>CMAKE_&lt;LANG&gt;_CLANG_TIDY_EXPORT_FIXES_DIR</code> to specify the output path, which is more recommended.</p> <p>e.g.</p> <pre><code>set(CMAKE_CXX_CLANG_TIDY_EXPORT_FIXES_DIR $(CMAKE_SOURCE_DIR)/clang-tidy-fixes) \n</code></pre>"},{"location":"Tutorials/clang-tidy%20tutorial/#clang-tidy-file","title":".clang-tidy File","text":"<p>When properties is to long. We'd better dump these configurations as a file named .clang-tidy.</p> <p>To generate a template you can add <code>-dump-config</code> option to print current configs, write it as a YAML format file named <code>.clang-tide</code>.</p> <pre><code>clang-tidy -checks=* -dump-config &gt; .clang-tidy\n</code></pre> <p>You could modify the checks that your project need by editing the <code>Checks</code> line.</p> <p>Note that using <code>-config-file=&lt;string&gt;</code> option to specify the path of .clang-tidy.</p>"}]}